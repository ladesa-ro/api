import { InputType, ObjectType } from '@nestjs/graphql';
import * as yup from 'yup';
import * as Dto from '../../../(spec)';
import { DtoProperty, ValidationContractUuid, createDtoOperationOptions, createValidationContract, getSchemaField } from '../../../../../infrastructure';
import { {{ c_pascal moduleName }}Dto, {{ c_pascal moduleName }}DtoProperties, {{ c_pascal moduleName }}DtoValidationContract } from './{{ c_kebab moduleName }}.dto';

// ======================================================

@ObjectType('{{ c_pascal moduleName }}FindOneResultDto')
export class {{ c_pascal moduleName }}FindOneResultDto implements Dto.I{{ c_pascal moduleName }}FindOneResultDto {
  @DtoProperty({{ c_pascal moduleName }}DtoProperties.{{ c_constant moduleName }}_ID)
  {{#if (eq modelIdType "uuid") }}
  id!: string;
  {{/if}}
  {{#if (eq modelIdType "numeric") }}
  id!: number;
  {{/if}}

  //

  {{#each propriedadesDeclaradas}}
  @DtoProperty({{ c_pascal ../moduleName }}DtoProperties.{{ c_constant ../moduleName }}_{{ c_constant this.nome }})
  {{this.nome}}!: {{this.tipoEntidadeInterface }} {{ ternary this.nullable "| null" "" }};

  {{/each}}
  //
}

// ======================================================

export const {{ c_pascal moduleName }}FindOneByIdInputValidationContract = createValidationContract(() =>
  yup.object().shape({
    id: getSchemaField({{ c_pascal moduleName }}DtoValidationContract(), 'id'),
  }),
);

// ======================================================

@InputType('{{ c_pascal moduleName }}FindOneByIdInputDto')
export class {{ c_pascal moduleName }}FindOneByIdInputDto implements Dto.I{{ c_pascal moduleName }}FindOneByIdInputDto {
  @DtoProperty({{ c_pascal moduleName }}DtoProperties.{{ c_constant moduleName }}_ID)
  {{#if (eq modelIdType "uuid") }}
  id!: string;
  {{/if}}
  {{#if (eq modelIdType "numeric") }}
  id!: number;
  {{/if}}
}

export const {{ c_constant moduleName }}_FIND_ONE_BY_ID = createDtoOperationOptions({
  description: 'Realiza a consulta a "{{ c_no moduleName }}"" por ID.',

  gql: {
    name: '{{ c_camel moduleName }}FindOneById',

    inputDtoType: () => {{ c_pascal moduleName }}FindOneByIdInputDto,
    inputDtoValidationContract: {{ c_pascal moduleName }}FindOneByIdInputValidationContract,

    returnType: () => {{ c_pascal moduleName }}Dto,
  },

  swagger: {
    returnType: {{ c_pascal moduleName }}FindOneResultDto,

    params: [
      {
        name: 'id',
        description: 'ID da {{ c_no moduleName }}.',
        validationContract: ValidationContractUuid,
      },
    ],
  },
});
