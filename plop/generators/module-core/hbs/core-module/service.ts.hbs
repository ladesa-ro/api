import { Injectable, NotFoundException } from '@nestjs/common';
import { map, pick } from 'lodash';
import { paginate } from 'nestjs-paginate';
import { SelectQueryBuilder } from 'typeorm';
import * as Dtos from '../../(spec)';
import type { IContextoDeAcesso } from '../../../../domain';
import { getPaginateQueryFromSearchInput } from '../../../../infrastructure';
import { DatabaseContextService } from '../../../../infrastructure/integrate-database/database-context/database-context.service';
import { {{ c_pascal moduleName }}Entity } from '../../../../infrastructure/integrate-database/typeorm/entities/{{ c_kebab moduleNameParent }}/{{ c_snake moduleName }}.entity';
import { paginateConfig } from '../../../../infrastructure/utils/paginateConfig';

// ============================================================================

const alias{{ c_pascal moduleName }} = '{{ c_snake moduleName }}';

// ============================================================================

export type I{{ c_pascal moduleName }}QueryBuilderViewOptions = {};

// ============================================================================

@Injectable()
export class {{ c_pascal moduleName }}Service {
  constructor(private databaseContext: DatabaseContextService) {}

  get {{ c_camel moduleName }}Repository() {
    return this.databaseContext.{{ c_camel moduleName }}Repository;
  }

  //

  static {{ c_pascal moduleName }}QueryBuilderView(alias: string, qb: SelectQueryBuilder<any>, _: I{{ c_pascal moduleName }}QueryBuilderViewOptions = {}) {
    qb.addSelect([
      `${alias}.id`,
      {{#each propriedadesDeclaradas}}
      `${alias}.{{this.nome}}`,
      {{/each}}
    ]);
  }

  //

  async {{ c_camel moduleName }}FindAll(contextoDeAcesso: IContextoDeAcesso, dto?: Dtos.ISearchInputDto): Promise<Dtos.I{{ c_pascal moduleName }}FindAllResultDto> {
    // =========================================================

    const qb = this.{{ c_camel moduleName }}Repository.createQueryBuilder(alias{{ c_pascal moduleName }});

    // =========================================================

    await contextoDeAcesso.aplicarFiltro('{{ c_snake moduleName }}:find', qb, alias{{ c_pascal moduleName }}, null);

    // =========================================================

    const paginated = await paginate(getPaginateQueryFromSearchInput(dto), qb.clone(), {
      ...paginateConfig,
      select: [
        //
        'id',
        //
        {{#each propriedadesDeclaradas}}
        "{{this.nome}}",
        {{/each}}
        //
      ],
      sortableColumns: [
        //
        {{#each propriedadesDeclaradas}}
        "{{this.nome}}",
        {{/each}}
      ],
      searchableColumns: [
        //
        'id',
        //
        {{#each propriedadesDeclaradas}}
        "{{this.nome}}",
        {{/each}}
        //
      ],
      defaultSortBy: [
      ],
      filterableColumns: {},
    });

    // =========================================================

    qb.select([]);

    {{ c_pascal moduleName }}Service.{{ c_pascal moduleName }}QueryBuilderView(alias{{ c_pascal moduleName }}, qb, {});

    // =========================================================

    const pageItemsView = await qb.andWhereInIds(map(paginated.data, 'id')).getMany();
    paginated.data = paginated.data.map((paginated) => pageItemsView.find((i) => i.id === paginated.id)!);

    // =========================================================

    return paginated;
  }

  async {{ c_camel moduleName }}FindById(contextoDeAcesso: IContextoDeAcesso, dto: Dtos.I{{ c_pascal moduleName }}FindOneByIdInputDto): Promise<Dtos.I{{ c_pascal moduleName }}FindOneResultDto | null> {
    // =========================================================

    const qb = this.{{ c_camel moduleName }}Repository.createQueryBuilder(alias{{ c_pascal moduleName }});

    // =========================================================

    await contextoDeAcesso.aplicarFiltro('{{ c_snake moduleName }}:find', qb, alias{{ c_pascal moduleName }}, null);

    // =========================================================

    qb.andWhere(`${{append '{'}}alias{{ c_pascal moduleName }}{{append '}'}}.id = :id`, { id: dto.id });

    // =========================================================

    qb.select([]);

    {{ c_pascal moduleName }}Service.{{ c_pascal moduleName }}QueryBuilderView(alias{{ c_pascal moduleName }}, qb, {});

    // =========================================================

    const {{ c_camel moduleName }} = await qb.getOne();

    // =========================================================

    return {{ c_camel moduleName }};
  }

  async {{ c_camel moduleName }}FindByIdStrict(contextoDeAcesso: IContextoDeAcesso, dto: Dtos.I{{ c_pascal moduleName }}FindOneByIdInputDto) {
    const {{ c_camel moduleName }} = await this.{{ c_camel moduleName }}FindById(contextoDeAcesso, dto);

    if (!{{ c_camel moduleName }}) {
      throw new NotFoundException();
    }

    return {{ c_camel moduleName }};
  }

  async {{ c_camel moduleName }}FindByIdSimple(
    contextoDeAcesso: IContextoDeAcesso,
    id: Dtos.I{{ c_pascal moduleName }}FindOneByIdInputDto['id'],
    options?: I{{ c_pascal moduleName }}QueryBuilderViewOptions,
    selection?: string[],
  ): Promise<Dtos.I{{ c_pascal moduleName }}FindOneResultDto | null> {
    // =========================================================

    const qb = this.{{ c_camel moduleName }}Repository.createQueryBuilder(alias{{ c_pascal moduleName }});

    // =========================================================

    await contextoDeAcesso.aplicarFiltro('{{ c_snake moduleName }}:find', qb, alias{{ c_pascal moduleName }}, null);

    // =========================================================

    qb.andWhere(`${{append '{'}}alias{{ c_pascal moduleName }}{{append '}'}}.id = :id`, { id });

    // =========================================================

    qb.select([]);

    {{ c_pascal moduleName }}Service.{{ c_pascal moduleName }}QueryBuilderView(alias{{ c_pascal moduleName }}, qb, {
      ...options,
    });

    if (selection) {
      qb.select(selection);
    }

    // =========================================================

    const {{ c_camel moduleName }} = await qb.getOne();

    // =========================================================

    return {{ c_camel moduleName }};
  }

  async {{ c_camel moduleName }}FindByIdSimpleStrict(contextoDeAcesso: IContextoDeAcesso, id: Dtos.I{{ c_pascal moduleName }}FindOneByIdInputDto['id'], options?: I{{ c_pascal moduleName }}QueryBuilderViewOptions, selection?: string[]) {
    const {{ c_camel moduleName }} = await this.{{ c_camel moduleName }}FindByIdSimple(contextoDeAcesso, id, options, selection);

    if (!{{ c_camel moduleName }}) {
      throw new NotFoundException();
    }

    return {{ c_camel moduleName }};
  }

  //

  async {{ c_camel moduleName }}Create(contextoDeAcesso: IContextoDeAcesso, dto: Dtos.I{{ c_pascal moduleName }}InputDto) {
    // =========================================================

    await contextoDeAcesso.ensurePermission('{{ c_snake moduleName }}:create', { dto });

    // =========================================================

    const dto{{ c_pascal moduleName }} = pick(dto, [
      {{#each propriedadesDeclaradas}}
      "{{this.nome}}",
      {{/each}}
    ]);

    const {{ c_camel moduleName }} = this.{{ c_camel moduleName }}Repository.create();

    this.{{ c_camel moduleName }}Repository.merge({{ c_camel moduleName }}, {
      ...dto{{ c_pascal moduleName }},
    });

    // =========================================================

    await this.{{ c_camel moduleName }}Repository.save({{ c_camel moduleName }});

    // =========================================================

    return this.{{ c_camel moduleName }}FindByIdStrict(contextoDeAcesso, { id: {{ c_camel moduleName }}.id });
  }

  async {{ c_camel moduleName }}Update(contextoDeAcesso: IContextoDeAcesso, dto: Dtos.I{{ c_pascal moduleName }}UpdateDto) {
    // =========================================================

    const current{{ c_pascal moduleName }} = await this.{{ c_camel moduleName }}FindByIdStrict(contextoDeAcesso, {
      id: dto.id,
    });

    // =========================================================

    await contextoDeAcesso.ensurePermission('{{ c_snake moduleName }}:update', { dto }, dto.id, this.{{ c_camel moduleName }}Repository.createQueryBuilder(alias{{ c_pascal moduleName }}));

    const dto{{ c_pascal moduleName }} = pick(dto, [
      {{#each propriedadesDeclaradas}}
      "{{this.nome}}",
      {{/each}}
    ]);

    const {{ c_camel moduleName }} = <{{ c_pascal moduleName }}Entity>{
      id: current{{ c_pascal moduleName }}.id,
    };

    this.{{ c_camel moduleName }}Repository.merge({{ c_camel moduleName }}, {
      ...dto{{ c_pascal moduleName }},
    });

    // =========================================================

    await this.{{ c_camel moduleName }}Repository.save({{ c_camel moduleName }});

    // =========================================================

    return this.{{ c_camel moduleName }}FindByIdStrict(contextoDeAcesso, { id: {{ c_camel moduleName }}.id });
  }

  //

  async {{ c_camel moduleName }}DeleteOneById(contextoDeAcesso: IContextoDeAcesso, dto: Dtos.I{{ c_pascal moduleName }}DeleteOneByIdInputDto) {
    // =========================================================

    await contextoDeAcesso.ensurePermission('{{ c_snake moduleName }}:delete', { dto }, dto.id, this.{{ c_camel moduleName }}Repository.createQueryBuilder(alias{{ c_pascal moduleName }}));

    // =========================================================

    const {{ c_camel moduleName }} = await this.{{ c_camel moduleName }}FindByIdStrict(contextoDeAcesso, dto);

    // =========================================================

    if ({{ c_camel moduleName }}) {
      await this.{{ c_camel moduleName }}Repository
        .createQueryBuilder(alias{{ c_pascal moduleName }})
        .update()
        .set({
          dateDeleted: 'NOW()',
        })
        .where('id = :{{ c_camel moduleName }}Id', { {{ c_camel moduleName }}Id: {{ c_camel moduleName }}.id })
        .andWhere('dateDeleted IS NULL')
        .execute();
    }

    // =========================================================

    return true;
  }
}
