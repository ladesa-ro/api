// This file is auto-generated by @hey-api/openapi-ts

export const $ArquivoFindOneResultDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: false,
      description: 'Nome.',
    },
    mimeType: {
      type: 'string',
      nullable: false,
      description: 'Mime-type.',
    },
    sizeBytes: {
      type: 'integer',
      nullable: false,
      description: 'Tamanho (em bytes).',
    },
    storageType: {
      type: 'string',
      nullable: false,
      description: 'Estratégia de armazenamento.',
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['name', 'mimeType', 'sizeBytes', 'storageType', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $ImagemArquivoFindOneFromImagemResultDto = {
  type: 'object',
  properties: {
    largura: {
      type: 'integer',
      nullable: true,
      description: 'Largura da imagem.',
    },
    altura: {
      type: 'integer',
      nullable: true,
      description: 'Altura da imagem.',
    },
    formato: {
      type: 'string',
      nullable: false,
      description: 'Formato da imagem.',
    },
    mimeType: {
      type: 'string',
      nullable: false,
      description: 'Mime Type da imagem.',
    },
    arquivo: {
      nullable: false,
      description: 'Arquivo.',
      allOf: [
        {
          $ref: '#/components/schemas/ArquivoFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['largura', 'altura', 'formato', 'mimeType', 'arquivo', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $ImagemDto = {
  type: 'object',
  properties: {
    descricao: {
      type: 'string',
      nullable: false,
      description: 'Descrição.',
    },
    versoes: {
      nullable: false,
      description: 'Versões.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ImagemArquivoFindOneFromImagemResultDto',
      },
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['descricao', 'versoes', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $UsuarioFindOneResultDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do usuário.',
    },
    matriculaSiape: {
      type: 'string',
      nullable: false,
      description: 'Matrícula Siape do usuário.',
    },
    email: {
      type: 'string',
      format: 'e-mail',
      nullable: false,
      description: 'E-mail do usuário.',
    },
    isSuperUser: {
      type: 'boolean',
      nullable: false,
      description: 'Indentifica é um super usuário.',
    },
    imagemCapa: {
      nullable: true,
      description: 'Imagem de capa',
      allOf: [
        {
          $ref: '#/components/schemas/ImagemDto',
        },
      ],
    },
    imagemPerfil: {
      nullable: true,
      description: 'Imagem de perfil',
      allOf: [
        {
          $ref: '#/components/schemas/ImagemDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['nome', 'matriculaSiape', 'email', 'isSuperUser', 'imagemCapa', 'imagemPerfil', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $EstadoFindOneResultDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome oficial do Estado.',
    },
    sigla: {
      type: 'string',
      nullable: false,
      description: 'Sigla do Estado.',
    },
    id: {
      type: 'integer',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['nome', 'sigla', 'id'],
} as const;

export const $CidadeFindOneResultDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome oficial da Cidade.',
    },
    estado: {
      nullable: false,
      description: 'Estado da Cidade.',
      allOf: [
        {
          $ref: '#/components/schemas/EstadoFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'integer',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['nome', 'estado', 'id'],
} as const;

export const $EnderecoFindOneResultDto = {
  type: 'object',
  properties: {
    cep: {
      type: 'string',
      nullable: false,
      description: '',
    },
    logradouro: {
      type: 'string',
      nullable: false,
      description: 'Logradouro',
    },
    numero: {
      type: 'integer',
      nullable: false,
      description: 'Número',
    },
    bairro: {
      type: 'string',
      nullable: false,
      description: 'Bairro',
    },
    complemento: {
      type: 'string',
      nullable: true,
      description: 'Complemento',
    },
    pontoReferencia: {
      type: 'string',
      nullable: true,
      description: 'Ponto de referência',
    },
    cidade: {
      nullable: false,
      description: 'Cidade',
      allOf: [
        {
          $ref: '#/components/schemas/CidadeFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['cep', 'logradouro', 'numero', 'bairro', 'complemento', 'pontoReferencia', 'cidade', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $CampusFindOneResultDto = {
  type: 'object',
  properties: {
    nomeFantasia: {
      type: 'string',
      nullable: false,
      description: 'Nome fantasia do Campus.',
    },
    razaoSocial: {
      type: 'string',
      nullable: false,
      description: 'Razão social do Campus.',
    },
    apelido: {
      type: 'string',
      nullable: false,
      description: 'Apelido do Campus.',
    },
    cnpj: {
      type: 'string',
      nullable: false,
      description: 'CNPJ do Campus.',
    },
    endereco: {
      nullable: false,
      description: 'Endereço do Campus',
      allOf: [
        {
          $ref: '#/components/schemas/EnderecoFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['nomeFantasia', 'razaoSocial', 'apelido', 'cnpj', 'endereco', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $VinculoFindOneResultDto = {
  type: 'object',
  properties: {
    ativo: {
      type: 'boolean',
      nullable: false,
      description: 'Indica se o vínculo está ativo.',
    },
    cargo: {
      type: 'string',
      nullable: false,
      description: 'Cargo do usuário no vínculo.',
    },
    campus: {
      nullable: false,
      description: 'Campus associado ao vínculo.',
      allOf: [
        {
          $ref: '#/components/schemas/CampusFindOneResultDto',
        },
      ],
    },
    usuario: {
      nullable: false,
      description: 'Usuário associado ao vínculo.',
      allOf: [
        {
          $ref: '#/components/schemas/UsuarioFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['ativo', 'cargo', 'campus', 'usuario', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $AuthWhoAmIResultDto = {
  type: 'object',
  properties: {
    usuario: {
      nullable: true,
      description: 'Usuário autenticado.',
      allOf: [
        {
          $ref: '#/components/schemas/UsuarioFindOneResultDto',
        },
      ],
    },
    vinculosAtivos: {
      nullable: false,
      description: 'Vínculos do usuário logado.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/VinculoFindOneResultDto',
      },
    },
  },
  required: ['usuario', 'vinculosAtivos'],
} as const;

export const $AuthLoginInputDto = {
  type: 'object',
  properties: {
    matriculaSiape: {
      type: 'string',
      nullable: false,
      description: 'Matrícula SIAPE.',
    },
    senha: {
      type: 'string',
      nullable: false,
      description: 'Senha do usuário.',
    },
  },
  required: ['matriculaSiape', 'senha'],
} as const;

export const $AuthSessionCredentialsDto = {
  type: 'object',
  properties: {
    access_token: {
      type: 'string',
      nullable: true,
      description: 'Token de acesso.',
    },
    token_type: {
      type: 'string',
      nullable: true,
      description: 'Tipo do token.',
    },
    id_token: {
      type: 'string',
      nullable: true,
      description: 'Token de identificação.',
    },
    refresh_token: {
      type: 'string',
      nullable: true,
      description: 'Token de refresh.',
    },
    expires_in: {
      type: 'integer',
      nullable: true,
      description: 'Tempo de expiração do token.',
    },
    expires_at: {
      type: 'integer',
      nullable: true,
      description: 'Tempo de expiração do token.',
    },
    session_state: {
      type: 'string',
      nullable: true,
      description: 'Estado da sessão.',
    },
    scope: {
      type: 'string',
      nullable: true,
      description: 'Escopo da autenticação.',
    },
  },
  required: ['access_token', 'token_type', 'id_token', 'refresh_token', 'expires_in', 'expires_at', 'session_state', 'scope'],
} as const;

export const $AuthRefreshInputDto = {
  type: 'object',
  properties: {
    refreshToken: {
      type: 'string',
      nullable: false,
      description: 'Token de refresh.',
    },
  },
  required: ['refreshToken'],
} as const;

export const $AuthSetInitialPasswordInputDto = {
  type: 'object',
  properties: {
    matriculaSiape: {
      type: 'string',
      nullable: false,
      description: 'Matrícula SIAPE.',
    },
    senha: {
      type: 'string',
      nullable: false,
      description: 'Nova senha.',
    },
  },
  required: ['matriculaSiape', 'senha'],
} as const;

export const $PaginatedSortByDto = {
  type: 'object',
  properties: {
    property: {
      type: 'string',
      nullable: false,
      description: 'Propriedade ordenada.',
    },
    mode: {
      type: 'string',
      nullable: false,
      description: 'Modo de ordenação.',
    },
  },
  required: ['property', 'mode'],
} as const;

export const $PaginatedResultMetaFilterDto = {
  type: 'object',
  properties: {
    property: {
      type: 'string',
      nullable: false,
      description: 'Propriedade filtrada.',
    },
    restrictions: {
      nullable: false,
      description: 'Restrições de filtragem',
      type: 'array',
      items: {
        type: 'string',
      },
    },
  },
  required: ['property', 'restrictions'],
} as const;

export const $PaginatedResultMetaDto = {
  type: 'object',
  properties: {
    itemsPerPage: {
      type: 'integer',
      nullable: false,
      description: 'Quantidade de itens por página.',
    },
    totalItems: {
      type: 'integer',
      nullable: false,
      description: 'Total de itens.',
    },
    currentPage: {
      type: 'integer',
      nullable: false,
      description: 'Página atual.',
    },
    totalPages: {
      type: 'integer',
      nullable: false,
      description: 'Quantidade total de páginas.',
    },
    search: {
      type: 'string',
      nullable: false,
      description: 'Termo textual da busca.',
    },
    sortBy: {
      nullable: false,
      description: 'Ordenação.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/PaginatedSortByDto',
      },
    },
    filter: {
      nullable: false,
      description: 'Filtros',
      type: 'array',
      items: {
        $ref: '#/components/schemas/PaginatedResultMetaFilterDto',
      },
    },
  },
  required: ['itemsPerPage', 'totalItems', 'currentPage', 'totalPages', 'search', 'sortBy', 'filter'],
} as const;

export const $PaginatedResultLinksDto = {
  type: 'object',
  properties: {
    first: {
      type: 'string',
      nullable: true,
      description: '',
    },
    previous: {
      type: 'string',
      nullable: true,
      description: '',
    },
    current: {
      type: 'string',
      nullable: false,
      description: '',
    },
    next: {
      type: 'string',
      nullable: true,
      description: '',
    },
    last: {
      type: 'string',
      nullable: true,
      description: '',
    },
  },
  required: ['first', 'previous', 'current', 'next', 'last'],
} as const;

export const $UsuarioFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/UsuarioFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $UsuarioInputCreateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do usuário.',
    },
    matriculaSiape: {
      type: 'string',
      nullable: false,
      description: 'Matrícula Siape do usuário.',
    },
    email: {
      type: 'string',
      format: 'e-mail',
      nullable: false,
      description: 'E-mail do usuário.',
    },
  },
  required: ['nome', 'matriculaSiape', 'email'],
} as const;

export const $UsuarioInputUpdateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do usuário.',
    },
    matriculaSiape: {
      type: 'string',
      nullable: false,
      description: 'Matrícula Siape do usuário.',
    },
    email: {
      type: 'string',
      format: 'e-mail',
      nullable: false,
      description: 'E-mail do usuário.',
    },
  },
} as const;

export const $VinculoFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/VinculoFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $CampusFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $UsuarioFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $VinculoUpdateInputDto = {
  type: 'object',
  properties: {
    campus: {
      nullable: false,
      description: 'Campus associado ao vínculo.',
      allOf: [
        {
          $ref: '#/components/schemas/CampusFindOneInputDto',
        },
      ],
    },
    usuario: {
      nullable: false,
      description: 'Usuário associado ao vínculo.',
      allOf: [
        {
          $ref: '#/components/schemas/UsuarioFindOneInputDto',
        },
      ],
    },
    cargos: {
      nullable: false,
      description: 'Cargos do usuário no vínculo.',
      type: 'array',
      items: {
        type: 'string',
      },
    },
  },
  required: ['campus', 'usuario', 'cargos'],
} as const;

export const $CampusFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/CampusFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $CidadeFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $EnderecoInputDto = {
  type: 'object',
  properties: {
    cep: {
      type: 'string',
      nullable: false,
      description: '',
    },
    logradouro: {
      type: 'string',
      nullable: false,
      description: 'Logradouro',
    },
    numero: {
      type: 'integer',
      nullable: false,
      description: 'Número',
    },
    bairro: {
      type: 'string',
      nullable: false,
      description: 'Bairro',
    },
    complemento: {
      type: 'string',
      nullable: true,
      description: 'Complemento',
    },
    pontoReferencia: {
      type: 'string',
      nullable: true,
      description: 'Ponto de referência',
    },
    cidade: {
      nullable: false,
      description: 'Cidade',
      allOf: [
        {
          $ref: '#/components/schemas/CidadeFindOneInputDto',
        },
      ],
    },
  },
  required: ['cep', 'logradouro', 'numero', 'bairro', 'complemento', 'pontoReferencia', 'cidade'],
} as const;

export const $CampusInputCreateDto = {
  type: 'object',
  properties: {
    nomeFantasia: {
      type: 'string',
      nullable: false,
      description: 'Nome fantasia do Campus.',
    },
    razaoSocial: {
      type: 'string',
      nullable: false,
      description: 'Razão social do Campus.',
    },
    apelido: {
      type: 'string',
      nullable: false,
      description: 'Apelido do Campus.',
    },
    cnpj: {
      type: 'string',
      nullable: false,
      description: 'CNPJ do Campus.',
    },
    endereco: {
      nullable: false,
      description: 'Endereço do Campus',
      allOf: [
        {
          $ref: '#/components/schemas/EnderecoInputDto',
        },
      ],
    },
  },
  required: ['nomeFantasia', 'razaoSocial', 'apelido', 'cnpj', 'endereco'],
} as const;

export const $CampusInputUpdateDto = {
  type: 'object',
  properties: {
    nomeFantasia: {
      type: 'string',
      nullable: false,
      description: 'Nome fantasia do Campus.',
    },
    razaoSocial: {
      type: 'string',
      nullable: false,
      description: 'Razão social do Campus.',
    },
    apelido: {
      type: 'string',
      nullable: false,
      description: 'Apelido do Campus.',
    },
    cnpj: {
      type: 'string',
      nullable: false,
      description: 'CNPJ do Campus.',
    },
    endereco: {
      nullable: false,
      description: 'Endereço do Campus',
      allOf: [
        {
          $ref: '#/components/schemas/EnderecoInputDto',
        },
      ],
    },
  },
} as const;

export const $ModalidadeFindOneResultDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome da modalidade.',
    },
    slug: {
      type: 'string',
      nullable: false,
      description: 'Slug da modalidade.',
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['nome', 'slug', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $ModalidadeFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModalidadeFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $ModalidadeInputCreateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome da modalidade.',
    },
    slug: {
      type: 'string',
      nullable: false,
      description: 'Slug da modalidade.',
    },
  },
  required: ['nome', 'slug'],
} as const;

export const $ModalidadeInputUpdateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome da modalidade.',
    },
    slug: {
      type: 'string',
      nullable: false,
      description: 'Slug da modalidade.',
    },
  },
} as const;

export const $EstadoFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/EstadoFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $CidadeFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/CidadeFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $ImagemFindOneResultDto = {
  type: 'object',
  properties: {
    descricao: {
      type: 'string',
      nullable: false,
      description: 'Descrição.',
    },
    versoes: {
      nullable: false,
      description: 'Versões.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ImagemArquivoFindOneFromImagemResultDto',
      },
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['descricao', 'versoes', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $BlocoFindOneResultDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do Bloco.',
    },
    codigo: {
      type: 'string',
      nullable: false,
      description: 'Código do Bloco.',
    },
    campus: {
      nullable: false,
      description: 'Campus.',
      allOf: [
        {
          $ref: '#/components/schemas/CampusFindOneResultDto',
        },
      ],
    },
    imagemCapa: {
      nullable: true,
      description: 'Imagem de capa',
      allOf: [
        {
          $ref: '#/components/schemas/ImagemFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['nome', 'codigo', 'campus', 'imagemCapa', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $BlocoFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/BlocoFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $BlocoInputCreateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do Bloco.',
    },
    codigo: {
      type: 'string',
      nullable: false,
      description: 'Código do Bloco.',
    },
    campus: {
      nullable: false,
      description: 'Campus.',
      allOf: [
        {
          $ref: '#/components/schemas/CampusFindOneInputDto',
        },
      ],
    },
  },
  required: ['nome', 'codigo', 'campus'],
} as const;

export const $BlocoInputUpdateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do Bloco.',
    },
    codigo: {
      type: 'string',
      nullable: false,
      description: 'Código do Bloco.',
    },
    campus: {
      nullable: false,
      description: 'Campus.',
      allOf: [
        {
          $ref: '#/components/schemas/CampusFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $AmbienteFindOneResultDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do ambiente/sala.',
    },
    descricao: {
      type: 'string',
      nullable: true,
      description: 'Descrição do ambiente/sala.',
    },
    codigo: {
      type: 'string',
      nullable: false,
      description: 'Código do ambiente/sala.',
    },
    capacidade: {
      type: 'integer',
      nullable: true,
      description: 'Capacidade do ambiente/sala.',
    },
    tipo: {
      type: 'string',
      nullable: true,
      description: 'Tipo do ambiente/sala. Ex.: sala aula, auditório, laboratório de química.',
    },
    bloco: {
      nullable: false,
      description: 'Bloco que o ambiente/sala pertence.',
      allOf: [
        {
          $ref: '#/components/schemas/BlocoFindOneResultDto',
        },
      ],
    },
    imagemCapa: {
      nullable: true,
      description: 'Imagem de capa',
      allOf: [
        {
          $ref: '#/components/schemas/ImagemFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['nome', 'descricao', 'codigo', 'capacidade', 'tipo', 'bloco', 'imagemCapa', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $AmbienteFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/AmbienteFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $BlocoFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $AmbienteInputCreateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do ambiente/sala.',
    },
    descricao: {
      type: 'string',
      nullable: true,
      description: 'Descrição do ambiente/sala.',
    },
    codigo: {
      type: 'string',
      nullable: false,
      description: 'Código do ambiente/sala.',
    },
    capacidade: {
      type: 'integer',
      nullable: true,
      description: 'Capacidade do ambiente/sala.',
    },
    tipo: {
      type: 'string',
      nullable: true,
      description: 'Tipo do ambiente/sala. Ex.: sala aula, auditório, laboratório de química.',
    },
    bloco: {
      nullable: false,
      description: 'Bloco que o ambiente/sala pertence.',
      allOf: [
        {
          $ref: '#/components/schemas/BlocoFindOneInputDto',
        },
      ],
    },
  },
  required: ['nome', 'codigo', 'capacidade', 'tipo', 'bloco'],
} as const;

export const $AmbienteInputUpdateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do ambiente/sala.',
    },
    descricao: {
      type: 'string',
      nullable: true,
      description: 'Descrição do ambiente/sala.',
    },
    codigo: {
      type: 'string',
      nullable: false,
      description: 'Código do ambiente/sala.',
    },
    capacidade: {
      type: 'integer',
      nullable: true,
      description: 'Capacidade do ambiente/sala.',
    },
    tipo: {
      type: 'string',
      nullable: true,
      description: 'Tipo do ambiente/sala. Ex.: sala aula, auditório, laboratório de química.',
    },
    bloco: {
      nullable: false,
      description: 'Bloco que o ambiente/sala pertence.',
      allOf: [
        {
          $ref: '#/components/schemas/BlocoFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $IntervaloDeTempoFindOneResultDto = {
  type: 'object',
  properties: {
    periodoInicio: {
      type: 'string',
      format: 'time',
      nullable: false,
      description: 'Horário que o intervalo de tempo inicia.',
    },
    periodoFim: {
      type: 'string',
      format: 'time',
      nullable: false,
      description: 'Horário que o intervalo de tempo termina.',
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['periodoInicio', 'periodoFim', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $ReservaFindOneResultDto = {
  type: 'object',
  properties: {
    situacao: {
      type: 'string',
      nullable: false,
      description: 'Situação da reserva.',
    },
    motivo: {
      type: 'string',
      nullable: true,
      description: 'Motivo da reserva.',
    },
    tipo: {
      type: 'string',
      nullable: true,
      description: 'Definir tipo da reserva.',
    },
    dataInicio: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data e hora de início da reserva.',
    },
    dataTermino: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Data e hora de término da reserva.',
    },
    usuario: {
      nullable: false,
      description: 'Usuário que fez a reserva.',
      allOf: [
        {
          $ref: '#/components/schemas/UsuarioFindOneResultDto',
        },
      ],
    },
    ambiente: {
      nullable: false,
      description: 'Ambiente que foi reservado.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneResultDto',
        },
      ],
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de tempo reservado.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['situacao', 'motivo', 'tipo', 'dataInicio', 'dataTermino', 'usuario', 'ambiente', 'intervaloDeTempo', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $ReservaFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ReservaFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $AmbienteFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $IntervaloDeTempoInputDto = {
  type: 'object',
  properties: {
    periodoInicio: {
      type: 'string',
      format: 'time',
      nullable: false,
      description: 'Horário que o intervalo de tempo inicia.',
    },
    periodoFim: {
      type: 'string',
      format: 'time',
      nullable: false,
      description: 'Horário que o intervalo de tempo termina.',
    },
  },
  required: ['periodoInicio', 'periodoFim'],
} as const;

export const $ReservaInputCreateDto = {
  type: 'object',
  properties: {
    situacao: {
      type: 'string',
      nullable: false,
      description: 'Situação da reserva.',
    },
    motivo: {
      type: 'string',
      nullable: true,
      description: 'Motivo da reserva.',
    },
    tipo: {
      type: 'string',
      nullable: true,
      description: 'Definir tipo da reserva.',
    },
    dataInicio: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data e hora de início da reserva.',
    },
    dataTermino: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Data e hora de término da reserva.',
    },
    usuario: {
      nullable: false,
      description: 'Usuário que fez a reserva.',
      allOf: [
        {
          $ref: '#/components/schemas/UsuarioFindOneInputDto',
        },
      ],
    },
    ambiente: {
      nullable: false,
      description: 'Ambiente que foi reservado.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneInputDto',
        },
      ],
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de tempo reservado.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
  },
  required: ['situacao', 'motivo', 'tipo', 'dataInicio', 'dataTermino', 'usuario', 'ambiente', 'intervaloDeTempo'],
} as const;

export const $ReservaInputUpdateDto = {
  type: 'object',
  properties: {
    situacao: {
      type: 'string',
      nullable: false,
      description: 'Situação da reserva.',
    },
    motivo: {
      type: 'string',
      nullable: true,
      description: 'Motivo da reserva.',
    },
    tipo: {
      type: 'string',
      nullable: true,
      description: 'Definir tipo da reserva.',
    },
    dataInicio: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data e hora de início da reserva.',
    },
    dataTermino: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Data e hora de término da reserva.',
    },
    usuario: {
      nullable: false,
      description: 'Usuário que fez a reserva.',
      allOf: [
        {
          $ref: '#/components/schemas/UsuarioFindOneInputDto',
        },
      ],
    },
    ambiente: {
      nullable: false,
      description: 'Ambiente que foi reservado.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneInputDto',
        },
      ],
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de tempo reservado.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
  },
} as const;

export const $CursoFindOneResultDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do curso.',
    },
    nomeAbreviado: {
      type: 'string',
      nullable: false,
      description: 'Nome abreviado do curso.',
    },
    campus: {
      nullable: false,
      description: 'Campus que o curso pertence.',
      allOf: [
        {
          $ref: '#/components/schemas/CampusFindOneResultDto',
        },
      ],
    },
    modalidade: {
      nullable: false,
      description: 'Modalidade a que o curso pertence.',
      allOf: [
        {
          $ref: '#/components/schemas/ModalidadeFindOneResultDto',
        },
      ],
    },
    imagemCapa: {
      nullable: true,
      description: 'Imagem de capa',
      allOf: [
        {
          $ref: '#/components/schemas/ImagemFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['nome', 'nomeAbreviado', 'campus', 'modalidade', 'imagemCapa', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $CursoFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/CursoFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $ModalidadeFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $CursoInputCreateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do curso.',
    },
    nomeAbreviado: {
      type: 'string',
      nullable: false,
      description: 'Nome abreviado do curso.',
    },
    campus: {
      nullable: false,
      description: 'Campus que o curso pertence.',
      allOf: [
        {
          $ref: '#/components/schemas/CampusFindOneInputDto',
        },
      ],
    },
    modalidade: {
      nullable: false,
      description: 'Modalidade a que o curso pertence.',
      allOf: [
        {
          $ref: '#/components/schemas/ModalidadeFindOneInputDto',
        },
      ],
    },
  },
  required: ['nome', 'nomeAbreviado', 'campus', 'modalidade'],
} as const;

export const $CursoInputUpdateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do curso.',
    },
    nomeAbreviado: {
      type: 'string',
      nullable: false,
      description: 'Nome abreviado do curso.',
    },
    campus: {
      nullable: false,
      description: 'Campus que o curso pertence.',
      allOf: [
        {
          $ref: '#/components/schemas/CampusFindOneInputDto',
        },
      ],
    },
    modalidade: {
      nullable: false,
      description: 'Modalidade a que o curso pertence.',
      allOf: [
        {
          $ref: '#/components/schemas/ModalidadeFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $DisciplinaFindOneResultDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome da disciplina.',
    },
    nomeAbreviado: {
      type: 'string',
      nullable: false,
      description: 'Nome abreviado da disciplina.',
    },
    cargaHoraria: {
      type: 'integer',
      nullable: false,
      description: 'Carga horária da disciplina.',
    },
    imagemCapa: {
      nullable: true,
      description: 'Imagem de capa',
      allOf: [
        {
          $ref: '#/components/schemas/ImagemFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['nome', 'nomeAbreviado', 'cargaHoraria', 'imagemCapa', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $DisciplinaFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/DisciplinaFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $DisciplinaInputCreateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome da disciplina.',
    },
    nomeAbreviado: {
      type: 'string',
      nullable: false,
      description: 'Nome abreviado da disciplina.',
    },
    cargaHoraria: {
      type: 'integer',
      nullable: false,
      description: 'Carga horária da disciplina.',
    },
  },
  required: ['nome', 'nomeAbreviado', 'cargaHoraria'],
} as const;

export const $DisciplinaInputUpdateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome da disciplina.',
    },
    nomeAbreviado: {
      type: 'string',
      nullable: false,
      description: 'Nome abreviado da disciplina.',
    },
    cargaHoraria: {
      type: 'integer',
      nullable: false,
      description: 'Carga horária da disciplina.',
    },
  },
} as const;

export const $TurmaFindOneResultDto = {
  type: 'object',
  properties: {
    periodo: {
      type: 'string',
      nullable: false,
      description: 'Período do Turma.',
    },
    curso: {
      nullable: false,
      description: 'Curso da Turma.',
      allOf: [
        {
          $ref: '#/components/schemas/CursoFindOneResultDto',
        },
      ],
    },
    ambientePadraoAula: {
      nullable: true,
      description: 'Ambiente padrão da sala de aula.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneResultDto',
        },
      ],
    },
    imagemCapa: {
      nullable: true,
      description: 'Imagem de capa',
      allOf: [
        {
          $ref: '#/components/schemas/ImagemFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['periodo', 'curso', 'imagemCapa', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $TurmaFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/TurmaFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $CursoFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $TurmaInputCreateDto = {
  type: 'object',
  properties: {
    periodo: {
      type: 'string',
      nullable: false,
      description: 'Período do Turma.',
    },
    curso: {
      nullable: false,
      description: 'Curso da Turma.',
      allOf: [
        {
          $ref: '#/components/schemas/CursoFindOneInputDto',
        },
      ],
    },
    ambientePadraoAula: {
      nullable: true,
      description: 'Ambiente padrão da sala de aula.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneInputDto',
        },
      ],
    },
  },
  required: ['periodo', 'curso'],
} as const;

export const $TurmaInputUpdateDto = {
  type: 'object',
  properties: {
    periodo: {
      type: 'string',
      nullable: false,
      description: 'Período do Turma.',
    },
    curso: {
      nullable: false,
      description: 'Curso da Turma.',
      allOf: [
        {
          $ref: '#/components/schemas/CursoFindOneInputDto',
        },
      ],
    },
    ambientePadraoAula: {
      nullable: true,
      description: 'Ambiente padrão da sala de aula.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $CalendarioLetivoFindOneResultDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do calendário letivo.',
    },
    ano: {
      type: 'integer',
      nullable: false,
      description: 'Ano do calendário letivo.',
    },
    campus: {
      nullable: false,
      description: 'Campus.',
      allOf: [
        {
          $ref: '#/components/schemas/CampusFindOneResultDto',
        },
      ],
    },
    modalidade: {
      nullable: true,
      description: 'Modalidade.',
      allOf: [
        {
          $ref: '#/components/schemas/ModalidadeFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['nome', 'ano', 'campus', 'modalidade', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $CalendarioLetivoFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/CalendarioLetivoFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $CalendarioLetivoInputCreateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do calendário letivo.',
    },
    ano: {
      type: 'integer',
      nullable: false,
      description: 'Ano do calendário letivo.',
    },
    campus: {
      nullable: false,
      description: 'Campus.',
      allOf: [
        {
          $ref: '#/components/schemas/CampusFindOneInputDto',
        },
      ],
    },
    modalidade: {
      nullable: true,
      description: 'Modalidade.',
      allOf: [
        {
          $ref: '#/components/schemas/ModalidadeFindOneInputDto',
        },
      ],
    },
  },
  required: ['nome', 'ano', 'campus', 'modalidade'],
} as const;

export const $CalendarioLetivoInputUpdateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: false,
      description: 'Nome do calendário letivo.',
    },
    ano: {
      type: 'integer',
      nullable: false,
      description: 'Ano do calendário letivo.',
    },
    campus: {
      nullable: false,
      description: 'Campus.',
      allOf: [
        {
          $ref: '#/components/schemas/CampusFindOneInputDto',
        },
      ],
    },
    modalidade: {
      nullable: true,
      description: 'Modalidade.',
      allOf: [
        {
          $ref: '#/components/schemas/ModalidadeFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $EventoFindOneResultDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: true,
      description: 'Nome do evento.',
    },
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataTermino: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de término.',
    },
    cor: {
      type: 'string',
      nullable: true,
      description: 'Cor da Evento.',
    },
    calendario: {
      nullable: true,
      description: 'Calendario.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['nome', 'dataInicio', 'dataTermino', 'cor', 'calendario', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $EventoFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/EventoFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $CalendarioLetivoFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $EventoInputCreateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: true,
      description: 'Nome do evento.',
    },
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataTermino: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de término.',
    },
    cor: {
      type: 'string',
      nullable: true,
      description: 'Cor da Evento.',
    },
    calendario: {
      nullable: true,
      description: 'Calendario.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneInputDto',
        },
      ],
    },
  },
  required: ['nome', 'dataInicio', 'dataTermino', 'cor', 'calendario'],
} as const;

export const $EventoInputUpdateDto = {
  type: 'object',
  properties: {
    nome: {
      type: 'string',
      nullable: true,
      description: 'Nome do evento.',
    },
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataTermino: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de término.',
    },
    cor: {
      type: 'string',
      nullable: true,
      description: 'Cor da Evento.',
    },
    calendario: {
      nullable: true,
      description: 'Calendario.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $DiaCalendarioFindOneResultDto = {
  type: 'object',
  properties: {
    data: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data.',
    },
    diaLetivo: {
      type: 'boolean',
      nullable: false,
      description: 'Define que o dia é letivo.',
    },
    feriado: {
      type: 'boolean',
      nullable: false,
      description: 'Define que o dia é feriado.',
    },
    calendario: {
      nullable: true,
      description: 'Calendario.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['data', 'diaLetivo', 'feriado', 'calendario', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $DiaCalendarioFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/DiaCalendarioFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $DiaCalendarioInputCreateDto = {
  type: 'object',
  properties: {
    data: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data.',
    },
    diaLetivo: {
      type: 'boolean',
      nullable: false,
      description: 'Define que o dia é letivo.',
    },
    feriado: {
      type: 'boolean',
      nullable: false,
      description: 'Define que o dia é feriado.',
    },
    calendario: {
      nullable: true,
      description: 'Calendario.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneInputDto',
        },
      ],
    },
  },
  required: ['data', 'diaLetivo', 'feriado', 'calendario'],
} as const;

export const $DiaCalendarioInputUpdateDto = {
  type: 'object',
  properties: {
    data: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data.',
    },
    diaLetivo: {
      type: 'boolean',
      nullable: false,
      description: 'Define que o dia é letivo.',
    },
    feriado: {
      type: 'boolean',
      nullable: false,
      description: 'Define que o dia é feriado.',
    },
    calendario: {
      nullable: true,
      description: 'Calendario.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $DiarioFindOneResultDto = {
  type: 'object',
  properties: {
    calendarioLetivo: {
      nullable: false,
      description: 'Calendário Letivo vinculado ao diário.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneResultDto',
        },
      ],
    },
    turma: {
      nullable: false,
      description: 'Turma vinculada ao diário.',
      allOf: [
        {
          $ref: '#/components/schemas/TurmaFindOneResultDto',
        },
      ],
    },
    disciplina: {
      nullable: false,
      description: 'Disciplina vinculada ao diário.',
      allOf: [
        {
          $ref: '#/components/schemas/DisciplinaFindOneResultDto',
        },
      ],
    },
    ambientePadrao: {
      nullable: true,
      description: 'Ambiente padrão.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneResultDto',
        },
      ],
    },
    imagemCapa: {
      nullable: true,
      description: 'Imagem de capa',
      allOf: [
        {
          $ref: '#/components/schemas/ImagemFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['calendarioLetivo', 'turma', 'disciplina', 'ambientePadrao', 'imagemCapa', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $DiarioFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/DiarioFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $TurmaFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $DisciplinaFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $DiarioInputCreateDto = {
  type: 'object',
  properties: {
    ativo: {
      type: 'boolean',
      nullable: false,
      description: 'Situação do diário.',
    },
    calendarioLetivo: {
      nullable: false,
      description: 'Calendário Letivo vinculado ao diário.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneInputDto',
        },
      ],
    },
    turma: {
      nullable: false,
      description: 'Turma vinculada ao diário.',
      allOf: [
        {
          $ref: '#/components/schemas/TurmaFindOneInputDto',
        },
      ],
    },
    disciplina: {
      nullable: false,
      description: 'Disciplina vinculada ao diário.',
      allOf: [
        {
          $ref: '#/components/schemas/DisciplinaFindOneInputDto',
        },
      ],
    },
    ambientePadrao: {
      nullable: true,
      description: 'Ambiente padrão.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneInputDto',
        },
      ],
    },
  },
  required: ['calendarioLetivo', 'turma', 'disciplina', 'ambientePadrao'],
} as const;

export const $DiarioInputUpdateDto = {
  type: 'object',
  properties: {
    ativo: {
      type: 'boolean',
      nullable: false,
      description: 'Situação do diário.',
    },
    calendarioLetivo: {
      nullable: false,
      description: 'Calendário Letivo vinculado ao diário.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneInputDto',
        },
      ],
    },
    turma: {
      nullable: false,
      description: 'Turma vinculada ao diário.',
      allOf: [
        {
          $ref: '#/components/schemas/TurmaFindOneInputDto',
        },
      ],
    },
    disciplina: {
      nullable: false,
      description: 'Disciplina vinculada ao diário.',
      allOf: [
        {
          $ref: '#/components/schemas/DisciplinaFindOneInputDto',
        },
      ],
    },
    ambientePadrao: {
      nullable: true,
      description: 'Ambiente padrão.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $DiarioProfessorFindOneResultDto = {
  type: 'object',
  properties: {
    situacao: {
      type: 'boolean',
      nullable: false,
      description: 'Situação do vínculo.',
    },
    vinculo: {
      nullable: false,
      description: 'Vínculo do usuário ao campus.',
      allOf: [
        {
          $ref: '#/components/schemas/VinculoFindOneResultDto',
        },
      ],
    },
    diario: {
      nullable: false,
      description: 'Diário vinculado.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['situacao', 'vinculo', 'diario', 'id'],
} as const;

export const $DiarioProfessorFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/DiarioProfessorFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $VinculoFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $DiarioFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $DiarioProfessorInputCreateDto = {
  type: 'object',
  properties: {
    situacao: {
      type: 'boolean',
      nullable: false,
      description: 'Situação do vínculo.',
    },
    vinculo: {
      nullable: false,
      description: 'Vínculo do usuário ao campus.',
      allOf: [
        {
          $ref: '#/components/schemas/VinculoFindOneInputDto',
        },
      ],
    },
    diario: {
      nullable: false,
      description: 'Diário vinculado.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioFindOneInputDto',
        },
      ],
    },
  },
  required: ['situacao', 'vinculo', 'diario'],
} as const;

export const $DiarioProfessorInputUpdateDto = {
  type: 'object',
  properties: {
    situacao: {
      type: 'boolean',
      nullable: false,
      description: 'Situação do vínculo.',
    },
    vinculo: {
      nullable: false,
      description: 'Vínculo do usuário ao campus.',
      allOf: [
        {
          $ref: '#/components/schemas/VinculoFindOneInputDto',
        },
      ],
    },
    diario: {
      nullable: false,
      description: 'Diário vinculado.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $EtapaFindOneResultDto = {
  type: 'object',
  properties: {
    numero: {
      type: 'integer',
      nullable: true,
      description: 'Número da etapa.',
    },
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataTermino: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de término.',
    },
    cor: {
      type: 'string',
      nullable: true,
      description: 'Cor da etapa.',
    },
    calendario: {
      nullable: true,
      description: 'Calendario.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['numero', 'dataInicio', 'dataTermino', 'cor', 'calendario', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $EtapaFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/EtapaFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $EtapaInputCreateDto = {
  type: 'object',
  properties: {
    numero: {
      type: 'integer',
      nullable: true,
      description: 'Número da etapa.',
    },
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataTermino: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de término.',
    },
    cor: {
      type: 'string',
      nullable: true,
      description: 'Cor da etapa.',
    },
    calendario: {
      nullable: true,
      description: 'Calendario.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneInputDto',
        },
      ],
    },
  },
  required: ['numero', 'dataInicio', 'dataTermino', 'cor', 'calendario'],
} as const;

export const $EtapaInputUpdateDto = {
  type: 'object',
  properties: {
    numero: {
      type: 'integer',
      nullable: true,
      description: 'Número da etapa.',
    },
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataTermino: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de término.',
    },
    cor: {
      type: 'string',
      nullable: true,
      description: 'Cor da etapa.',
    },
    calendario: {
      nullable: true,
      description: 'Calendario.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $AulaFindOneResultDto = {
  type: 'object',
  properties: {
    formato: {
      type: 'string',
      nullable: true,
      description: 'Formato da aula.',
    },
    data: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data da aula.',
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de Tempo associado à aula.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoFindOneResultDto',
        },
      ],
    },
    diario: {
      nullable: false,
      description: 'Diário associado à aula.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioFindOneResultDto',
        },
      ],
    },
    ambiente: {
      nullable: true,
      description: 'Ambiente associado à aula.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['formato', 'data', 'intervaloDeTempo', 'diario', 'ambiente', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $AulaFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/AulaFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $AulaInputCreateDto = {
  type: 'object',
  properties: {
    formato: {
      type: 'string',
      nullable: true,
      description: 'Formato da aula.',
    },
    data: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data da aula.',
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de Tempo associado à aula.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
    diario: {
      nullable: false,
      description: 'Diário associado à aula.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioFindOneInputDto',
        },
      ],
    },
    ambiente: {
      nullable: true,
      description: 'Ambiente associado à aula.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneInputDto',
        },
      ],
    },
  },
  required: ['formato', 'data', 'intervaloDeTempo', 'diario', 'ambiente'],
} as const;

export const $AulaInputUpdateDto = {
  type: 'object',
  properties: {
    formato: {
      type: 'string',
      nullable: true,
      description: 'Formato da aula.',
    },
    data: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data da aula.',
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de Tempo associado à aula.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
    diario: {
      nullable: false,
      description: 'Diário associado à aula.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioFindOneInputDto',
        },
      ],
    },
    ambiente: {
      nullable: true,
      description: 'Ambiente associado à aula.',
      allOf: [
        {
          $ref: '#/components/schemas/AmbienteFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $TurmaDisponibilidadeFindOneResultDto = {
  type: 'object',
  properties: {
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Data de término.',
    },
    turma: {
      nullable: true,
      description: 'Turma.',
      allOf: [
        {
          $ref: '#/components/schemas/TurmaFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['dataInicio', 'dataFim', 'turma', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $TurmaDisponibilidadeFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/TurmaDisponibilidadeFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $TurmaDisponibilidadeInputCreateDto = {
  type: 'object',
  properties: {
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Data de término.',
    },
    turma: {
      nullable: true,
      description: 'Turma.',
      allOf: [
        {
          $ref: '#/components/schemas/TurmaFindOneInputDto',
        },
      ],
    },
  },
  required: ['dataInicio', 'dataFim', 'turma'],
} as const;

export const $TurmaDisponibilidadeInputUpdateDto = {
  type: 'object',
  properties: {
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Data de término.',
    },
    turma: {
      nullable: true,
      description: 'Turma.',
      allOf: [
        {
          $ref: '#/components/schemas/TurmaFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $TurmaDisponibilidadeDiaFindOneResultDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    intervaloDeTempo: {
      nullable: true,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoFindOneResultDto',
        },
      ],
    },
    turmaDisponibilidade: {
      nullable: true,
      description: 'Disponibilidade da turma.',
      allOf: [
        {
          $ref: '#/components/schemas/TurmaDisponibilidadeFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['diaSemanaIso', 'intervaloDeTempo', 'turmaDisponibilidade', 'id'],
} as const;

export const $TurmaDisponibilidadeDiaFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/TurmaDisponibilidadeDiaFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $TurmaDisponibilidadeFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $TurmaDisponibilidadeDiaInputCreateDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    intervaloDeTempo: {
      nullable: true,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
    turmaDisponibilidade: {
      nullable: true,
      description: 'Disponibilidade da turma.',
      allOf: [
        {
          $ref: '#/components/schemas/TurmaDisponibilidadeFindOneInputDto',
        },
      ],
    },
  },
  required: ['diaSemanaIso', 'intervaloDeTempo', 'turmaDisponibilidade'],
} as const;

export const $TurmaDisponibilidadeDiaInputUpdateDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    intervaloDeTempo: {
      nullable: true,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
    turmaDisponibilidade: {
      nullable: true,
      description: 'Disponibilidade da turma.',
      allOf: [
        {
          $ref: '#/components/schemas/TurmaDisponibilidadeFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $DisponibilidadeProfessorFindOneResultDto = {
  type: 'object',
  properties: {
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Data de término.',
    },
    vinculoProfessor: {
      nullable: false,
      description: 'Vínculo de professor.',
      allOf: [
        {
          $ref: '#/components/schemas/VinculoFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['dataInicio', 'dataFim', 'vinculoProfessor', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $DisponibilidadeProfessorFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/DisponibilidadeProfessorFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $DisponibilidadeProfessorInputCreateDto = {
  type: 'object',
  properties: {
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Data de término.',
    },
    vinculoProfessor: {
      nullable: false,
      description: 'Vínculo de professor.',
      allOf: [
        {
          $ref: '#/components/schemas/VinculoFindOneInputDto',
        },
      ],
    },
  },
  required: ['dataInicio', 'dataFim', 'vinculoProfessor'],
} as const;

export const $DisponibilidadeProfessorInputUpdateDto = {
  type: 'object',
  properties: {
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Data de início.',
    },
    dataFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Data de término.',
    },
    vinculoProfessor: {
      nullable: false,
      description: 'Vínculo de professor.',
      allOf: [
        {
          $ref: '#/components/schemas/VinculoFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $DisponibilidadeProfessorDiaFindOneResultDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoFindOneResultDto',
        },
      ],
    },
    disponibilidade: {
      nullable: false,
      description: 'Disponibilidade do professor.',
      allOf: [
        {
          $ref: '#/components/schemas/DisponibilidadeProfessorFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['diaSemanaIso', 'intervaloDeTempo', 'disponibilidade', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $DisponibilidadeProfessorDiaFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/DisponibilidadeProfessorDiaFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $DisponibilidadeProfessorFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $DisponibilidadeProfessorDiaInputCreateDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
    disponibilidade: {
      nullable: false,
      description: 'Disponibilidade do professor.',
      allOf: [
        {
          $ref: '#/components/schemas/DisponibilidadeProfessorFindOneInputDto',
        },
      ],
    },
  },
  required: ['diaSemanaIso', 'intervaloDeTempo', 'disponibilidade'],
} as const;

export const $DisponibilidadeProfessorDiaInputUpdateDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
    disponibilidade: {
      nullable: false,
      description: 'Disponibilidade do professor.',
      allOf: [
        {
          $ref: '#/components/schemas/DisponibilidadeProfessorFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $DiarioPreferenciaAgrupamentoFindOneResultDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    aulasSeguidas: {
      type: 'integer',
      nullable: false,
      description: 'Quantidade de aulas seguidas.',
    },
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Início da vigência da preferência de agendamento.',
    },
    dataFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Fim da vigência da preferência de agendamento.',
    },
    intervaloDeTempo: {
      nullable: true,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoFindOneResultDto',
        },
      ],
    },
    diario: {
      nullable: false,
      description: 'Diário vinculado.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['diaSemanaIso', 'aulasSeguidas', 'dataInicio', 'dataFim', 'intervaloDeTempo', 'diario', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $DiarioPreferenciaAgrupamentoFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/DiarioPreferenciaAgrupamentoFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $DiarioPreferenciaAgrupamentoInputCreateDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    aulasSeguidas: {
      type: 'integer',
      nullable: false,
      description: 'Quantidade de aulas seguidas.',
    },
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Início da vigência da preferência de agendamento.',
    },
    dataFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Fim da vigência da preferência de agendamento.',
    },
    intervaloDeTempo: {
      nullable: true,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
    diario: {
      nullable: false,
      description: 'Diário vinculado.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioFindOneInputDto',
        },
      ],
    },
  },
  required: ['diaSemanaIso', 'aulasSeguidas', 'dataInicio', 'dataFim', 'intervaloDeTempo', 'diario'],
} as const;

export const $DiarioPreferenciaAgrupamentoInputUpdateDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    aulasSeguidas: {
      type: 'integer',
      nullable: false,
      description: 'Quantidade de aulas seguidas.',
    },
    dataInicio: {
      type: 'string',
      format: 'date',
      nullable: false,
      description: 'Início da vigência da preferência de agendamento.',
    },
    dataFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Fim da vigência da preferência de agendamento.',
    },
    intervaloDeTempo: {
      nullable: true,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
    diario: {
      nullable: false,
      description: 'Diário vinculado.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $HorarioGeradoFindOneResultDto = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      nullable: true,
      description: 'Status do horário gerado.',
    },
    tipo: {
      type: 'string',
      nullable: true,
      description: 'Tipo do horário gerado.',
    },
    dataGeracao: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data em que o horário foi gerado.',
    },
    vigenciaInicio: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Início da vigência do horário gerado.',
    },
    vigenciaFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Fim da vigência do horário gerado.',
    },
    calendario: {
      nullable: false,
      description: 'calendário.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['status', 'tipo', 'dataGeracao', 'vigenciaInicio', 'vigenciaFim', 'calendario', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $HorarioGeradoFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/HorarioGeradoFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $HorarioGeradoInputCreateDto = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      nullable: true,
      description: 'Status do horário gerado.',
    },
    tipo: {
      type: 'string',
      nullable: true,
      description: 'Tipo do horário gerado.',
    },
    dataGeracao: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data em que o horário foi gerado.',
    },
    vigenciaInicio: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Início da vigência do horário gerado.',
    },
    vigenciaFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Fim da vigência do horário gerado.',
    },
    calendario: {
      nullable: false,
      description: 'calendário.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneInputDto',
        },
      ],
    },
  },
  required: ['status', 'tipo', 'dataGeracao', 'vigenciaInicio', 'vigenciaFim', 'calendario'],
} as const;

export const $HorarioGeradoInputUpdateDto = {
  type: 'object',
  properties: {
    status: {
      type: 'string',
      nullable: true,
      description: 'Status do horário gerado.',
    },
    tipo: {
      type: 'string',
      nullable: true,
      description: 'Tipo do horário gerado.',
    },
    dataGeracao: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data em que o horário foi gerado.',
    },
    vigenciaInicio: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Início da vigência do horário gerado.',
    },
    vigenciaFim: {
      type: 'string',
      format: 'date',
      nullable: true,
      description: 'Fim da vigência do horário gerado.',
    },
    calendario: {
      nullable: false,
      description: 'calendário.',
      allOf: [
        {
          $ref: '#/components/schemas/CalendarioLetivoFindOneInputDto',
        },
      ],
    },
  },
} as const;

export const $HorarioGeradoAulaFindOneResultDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoFindOneResultDto',
        },
      ],
    },
    diarioProfessor: {
      nullable: true,
      description: 'Diário do professor.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioProfessorFindOneResultDto',
        },
      ],
    },
    horarioGerado: {
      nullable: false,
      description: 'Horário gerado.',
      allOf: [
        {
          $ref: '#/components/schemas/HorarioGeradoFindOneResultDto',
        },
      ],
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
    dateCreated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Criação do Registro.',
    },
    dateUpdated: {
      type: 'string',
      format: 'date-time',
      nullable: false,
      description: 'Data de Atualização do Registro.',
    },
    dateDeleted: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      description: 'Data de Exclusão do Registro.',
    },
  },
  required: ['diaSemanaIso', 'intervaloDeTempo', 'diarioProfessor', 'horarioGerado', 'id', 'dateCreated', 'dateUpdated', 'dateDeleted'],
} as const;

export const $HorarioGeradoAulaFindAllResultDto = {
  type: 'object',
  properties: {
    meta: {
      nullable: false,
      description: 'Metadados da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultMetaDto',
        },
      ],
    },
    data: {
      nullable: false,
      description: 'Resultados da busca atual.',
      type: 'array',
      items: {
        $ref: '#/components/schemas/HorarioGeradoAulaFindOneResultDto',
      },
    },
    links: {
      nullable: false,
      description: 'Links da busca.',
      allOf: [
        {
          $ref: '#/components/schemas/PaginatedResultLinksDto',
        },
      ],
    },
  },
  required: ['meta', 'data', 'links'],
} as const;

export const $DiarioProfessorFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $HorarioGeradoFindOneInputDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: false,
      description: 'ID do Registro.',
    },
  },
  required: ['id'],
} as const;

export const $HorarioGeradoAulaInputCreateDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
    diarioProfessor: {
      nullable: true,
      description: 'Diário do professor.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioProfessorFindOneInputDto',
        },
      ],
    },
    horarioGerado: {
      nullable: false,
      description: 'Horário gerado.',
      allOf: [
        {
          $ref: '#/components/schemas/HorarioGeradoFindOneInputDto',
        },
      ],
    },
  },
  required: ['diaSemanaIso', 'intervaloDeTempo', 'diarioProfessor', 'horarioGerado'],
} as const;

export const $HorarioGeradoAulaInputUpdateDto = {
  type: 'object',
  properties: {
    diaSemanaIso: {
      type: 'integer',
      nullable: false,
      description: 'Dia da semana.',
    },
    intervaloDeTempo: {
      nullable: false,
      description: 'Intervalo de tempo.',
      allOf: [
        {
          $ref: '#/components/schemas/IntervaloDeTempoInputDto',
        },
      ],
    },
    diarioProfessor: {
      nullable: true,
      description: 'Diário do professor.',
      allOf: [
        {
          $ref: '#/components/schemas/DiarioProfessorFindOneInputDto',
        },
      ],
    },
    horarioGerado: {
      nullable: false,
      description: 'Horário gerado.',
      allOf: [
        {
          $ref: '#/components/schemas/HorarioGeradoFindOneInputDto',
        },
      ],
    },
  },
} as const;
