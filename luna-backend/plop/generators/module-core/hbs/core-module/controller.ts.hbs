import { Controller, Delete, Get, Patch, Post } from '@nestjs/common';
import { ApiTags } from '@nestjs/swagger';
import { Paginate, PaginateQuery } from 'nestjs-paginate';
import * as Dto from '../../(spec)';
import { IClientAccess } from '../../../../domain';
import {
  ClientAccessHttp,
  DtoOperationCreate,
  DtoOperationDelete,
  DtoOperationFindAll,
  DtoOperationFindOne,
  DtoOperationUpdate,
  HttpDtoBody,
  HttpDtoParam,
  getSearchInputFromPaginateQuery,
} from '../../../../infrastructure';
import { {{ c_pascal moduleName }}Operations } from './dtos';
import { {{ c_pascal moduleName }}Service } from './{{ c_kebab moduleName }}.service';

@ApiTags('{{ c_pascal moduleName }}s')
@Controller('/{{ c_kebab moduleName }}s')
export class {{ c_pascal moduleName }}Controller {
  constructor(private {{ c_camel moduleName }}Service: {{ c_pascal moduleName }}Service) {}

  //

  @Get('/')
  @DtoOperationFindAll({{ c_pascal moduleName }}Operations.{{ c_constant moduleName }}_FIND_ALL)
  async {{ c_camel moduleName }}FindAll(@ClientAccessHttp() clientAccess: IClientAccess, @Paginate() query: PaginateQuery): Promise<Dto.I{{ c_pascal moduleName }}FindAllResultDto> {
    return this.{{ c_camel moduleName }}Service.{{ c_camel moduleName }}FindAll(clientAccess, getSearchInputFromPaginateQuery(query));
  }

  //

  @Get('/:id')
  @DtoOperationFindOne({{ c_pascal moduleName }}Operations.{{ c_constant moduleName }}_FIND_ONE_BY_ID)
  async {{ c_camel moduleName }}FindById(
    @ClientAccessHttp() clientAccess: IClientAccess,
    @HttpDtoParam({{ c_pascal moduleName }}Operations.{{ c_constant moduleName }}_FIND_ONE_BY_ID, 'id')
    id: string,
  ) {
    return this.{{ c_camel moduleName }}Service.{{ c_camel moduleName }}FindByIdStrict(clientAccess, { id });
  }

  //

  @Post('/')
  @DtoOperationCreate({{ c_pascal moduleName }}Operations.{{ c_constant moduleName }}_CREATE)
  async {{ c_camel moduleName }}Create(@ClientAccessHttp() clientAccess: IClientAccess, @HttpDtoBody({{ c_pascal moduleName }}Operations.{{ c_constant moduleName }}_CREATE) dto: Dto.I{{ c_pascal moduleName }}InputDto) {
    return this.{{ c_camel moduleName }}Service.{{ c_camel moduleName }}Create(clientAccess, dto);
  }

  //

  @Patch('/:id')
  @DtoOperationUpdate({{ c_pascal moduleName }}Operations.{{ c_constant moduleName }}_UPDATE)
  async {{ c_camel moduleName }}Update(
    @ClientAccessHttp() clientAccess: IClientAccess,
    @HttpDtoParam({{ c_pascal moduleName }}Operations.{{ c_constant moduleName }}_UPDATE, 'id')
    id: string,
    @HttpDtoBody({{ c_pascal moduleName }}Operations.{{ c_constant moduleName }}_UPDATE)
    dto: Omit<Dto.I{{ c_pascal moduleName }}UpdateDto, 'id'>,
  ) {
    const dtoUpdate: Dto.I{{ c_pascal moduleName }}UpdateDto = {
      ...dto,
      id,
    };

    return this.{{ c_camel moduleName }}Service.{{ c_camel moduleName }}Update(clientAccess, dtoUpdate);
  }

  //

  @Delete('/:id')
  @DtoOperationDelete({{ c_pascal moduleName }}Operations.{{ c_constant moduleName }}_DELETE_ONE_BY_ID)
  async {{ c_camel moduleName }}DeleteOneById(
    @ClientAccessHttp() clientAccess: IClientAccess,
    @HttpDtoParam({{ c_pascal moduleName }}Operations.{{ c_constant moduleName }}_DELETE_ONE_BY_ID, 'id')
    id: string,
  ) {
    return this.{{ c_camel moduleName }}Service.{{ c_camel moduleName }}DeleteOneById(clientAccess, { id });
  }

  //
}
