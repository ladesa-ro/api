import { MigrationInterface, QueryRunner, Table } from 'typeorm';

const tableName = '{{ c_snake moduleName }}';

export class CreateTable{{ c_pascal moduleName }}{{ migrationTimestamp }} implements MigrationInterface {
  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.createTable(
      new Table({
        name: tableName,
        columns: [
          {{#if (eq modelIdType "uuid") }}
          {
            name: 'id',
            type: 'uuid',
            isPrimary: true,
            default: 'gen_random_uuid()',
          },
          {{/if}}
          {{#if (eq modelIdType "numeric") }}
          {
            name: 'id',
            type: 'int',
            isPrimary: true,
            generationStrategy: "identity"
          },
          {{/if}}

          {{#each propriedadesDeclaradas}}
          {
            name: '{{ c_snake this.nomeColuna }}',
            type: '{{ this.tipoEntidadeColuna }}',
            isNullable: {{ ternary this.nullable "true" "false" }},
          },

          {{/each}}

          //

          {{#if modelDated}}
          {
            name: 'date_created',
            type: 'timestamptz',
            isNullable: false,
            default: 'NOW()',
          },
          {
            name: 'date_updated',
            type: 'timestamptz',
            isNullable: false,
            default: 'NOW()',
          },
          {
            name: 'date_deleted',
            type: 'timestamptz',
            isNullable: true,
          },
          {{/if}}
        ],
        foreignKeys: [
          //
        ],
      }),
    );

    {{#if modelDated}}
    await queryRunner.query(
      `
            CREATE TRIGGER change_date_updated_table_${tableName}
            BEFORE UPDATE ON ${tableName}
            FOR EACH ROW
            EXECUTE FUNCTION change_date_updated();
      `,
    );
    {{/if}}
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.dropTable(tableName);
  }
}
