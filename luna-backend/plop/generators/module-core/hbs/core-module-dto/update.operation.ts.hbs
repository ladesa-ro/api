import { InputType } from '@nestjs/graphql';
import { OmitType } from '@nestjs/swagger';
import * as yup from 'yup';
import { DtoProperty, ValidationContractUuid, createDtoOperationOptions, createValidationContract } from '../../../../../infrastructure';
import { {{ c_pascal moduleName }}FindOneByIdInputValidationContract, {{ c_pascal moduleName }}FindOneResultDto } from './{{ c_kebab moduleName }}-find-one.operation';
import { {{ c_pascal moduleName }}InputDtoValidationContract } from './{{ c_kebab moduleName }}-input.operation';
import { {{ c_pascal moduleName }}Dto, {{ c_pascal moduleName }}DtoProperties } from './{{ c_kebab moduleName }}.dto';
import { I{{ c_pascal moduleName }}UpdateDto } from '../../../(spec)';

// ======================================================

export const {{ c_pascal moduleName }}UpdateInputDtoValidationContract = createValidationContract(() => {
  return yup
    .object()
    .concat({{ c_pascal moduleName }}FindOneByIdInputValidationContract())
    .concat({{ c_pascal moduleName }}InputDtoValidationContract().partial().omit([]))
    .shape({
    });
});

// ======================================================

@InputType('{{ c_pascal moduleName }}UpdateInputDto')
export class {{ c_pascal moduleName }}UpdateInputDto implements I{{ c_pascal moduleName }}UpdateDto {
  @DtoProperty({{ c_pascal moduleName }}DtoProperties.{{ c_constant moduleName }}_ID)
  {{#if (eq modelIdType "uuid") }}
  id!: string;
  {{/if}}
  {{#if (eq modelIdType "numeric") }}
  id!: number;
  {{/if}}

  //

  {{#each propriedadesDeclaradas}}
  @DtoProperty({{ c_pascal ../moduleName }}DtoProperties.{{ c_constant ../moduleName }}_{{ c_constant this.nome }}, { required: false })
  {{this.nome}}?: {{this.tipoEntidadeInterface }} {{ ternary this.nullable "| null" "" }};

  {{/each}}
  //
}

export class {{ c_pascal moduleName }}UpdateWithoutIdInputDto extends OmitType({{ c_pascal moduleName }}UpdateInputDto, ['id'] as const) {}
export const {{ c_constant moduleName }}_UPDATE = createDtoOperationOptions({
  description: 'Realiza a alteração de uma "{{ c_no moduleName }}".',

  gql: {
    name: '{{ c_camel moduleName }}Update',

    inputDtoType: () => {{ c_pascal moduleName }}UpdateInputDto,
    inputDtoValidationContract: {{ c_pascal moduleName }}UpdateInputDtoValidationContract,

    returnType: () => {{ c_pascal moduleName }}Dto,
  },

  swagger: {
    inputBodyType: {{ c_pascal moduleName }}UpdateWithoutIdInputDto,

    inputBodyValidationContract: createValidationContract(() => {{ c_pascal moduleName }}UpdateInputDtoValidationContract().omit(['id'])),

    params: [
      {
        name: 'id',
        description: 'ID da "{{ c_no moduleName }}".',
        validationContract: ValidationContractUuid,
      },
    ],

    returnType: {{ c_pascal moduleName }}FindOneResultDto,
  },
});
