name: 'CI / CD'

on:
  workflow_dispatch:
  push:
    branches:
      - 'development'
      - 'production'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI_DEVELOPMENT_BRANCH: ${{ vars.CI_DEVELOPMENT_BRANCH }}
  CI_PRODUCTION_BRANCH: ${{ vars.CI_PRODUCTION_BRANCH }}

  ENABLE_BUILD_IMAGE: ${{ vars.ENABLE_BUILD_IMAGE }}
  IMAGE_TAG_DEVELOPMENT: ${{ vars.IMAGE_TAG_DEVELOPMENT }}
  IMAGE_TAG_PRODUCTION: ${{ vars.IMAGE_TAG_PRODUCTION }}

  ENABLE_PUSH_IMAGE: ${{ vars.ENABLE_PUSH_IMAGE }}

  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}

  ENABLE_TRIGGER_DEPLOY: ${{ vars.ENABLE_TRIGGER_DEPLOY }}
  DEPLOY_DISPATCH_TOKEN: ${{ secrets.DEPLOY_DISPATCH_TOKEN }}
  DEPLOY_OWNER: ${{ vars.DEPLOY_OWNER }}
  DEPLOY_REPOSITORY: ${{ vars.DEPLOY_REPOSITORY }}
  DEPLOY_WORKFLOW: ${{ vars.DEPLOY_WORKFLOW }}
  DEPLOY_BRANCH: ${{ vars.DEPLOY_BRANCH }}

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.LADESA_BOT_ID }}
          private-key: ${{ secrets.LADESA_BOT_SECRET }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        if: ${{ env.ENABLE_PUSH_IMAGE == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_TOKEN }}

      - name: Determine target image name
        id: image-name
        run: |
          IMAGE_NAME="disabled"

          if [[ "${{env.ENABLE_BUILD_IMAGE}}" == "true" ]]; then
            IMAGE_NAME="local-service"

            if [[ "${{ github.ref_name }}" == "${{ env.CI_DEVELOPMENT_BRANCH }}" ]]; then
              IMAGE_NAME="${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_DEVELOPMENT }}"
            elif [[ "${{ github.ref_name }}" == "${{ env.CI_PRODUCTION_BRANCH }}" ]]; then
              IMAGE_NAME="${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_PRODUCTION }}"
            fi
          fi

          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Build and push image (if enabled)
        if: ${{ steps.image-name.outputs.IMAGE_NAME != 'disabled' }}
        uses: docker/build-push-action@v6
        with:
          file: 'Dockerfile.service'
          load: true
          push: ${{ env.ENABLE_PUSH_IMAGE == 'true' }}
          tags: ${{ steps.image-name.outputs.IMAGE_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run the build process with Docker
        uses: addnab/docker-run-action@v3
        if: ${{ steps.image-name.outputs.IMAGE_NAME != 'disabled' }}
        with:
          image: ${{ steps.image-name.outputs.IMAGE_NAME }}
          options: |
            -u 1001
            -v ${{ github.workspace }}/integrations/openapi-json:/tmp/openapi-json
            -e OUT_FILE=/tmp/openapi-json/generated.json
          run: npm run gen:openapi

      - name: Log git changes
        run: |
          git status

      - name: Commit generated code if possible
        shell: bash
        run: |
          if [[ ! "$(git status --porcelain | grep integrations | wc -l)" == "0" ]]; then
            git config user.name 'github-actions[bot]'
            git config user.email 'github-actions[bot]@users.noreply.github.com'
            
            git merge -m "chore: merge origin/${{ github.ref_name }} into ${{ github.ref_name }} [skip ci]" -X theirs origin/${{ github.ref_name }};

            git add -A integrations;
            git commit -m "chore(integrations): codegen [skip ci]"

            git push origin ${{ github.ref_name }}
          fi

  api-service-deploy:
    runs-on: ubuntu-latest
    needs: ci-cd
    steps:
      - name: Dispatch infrastructure deploy workflow
        if: ${{ env.ENABLE_BUILD_IMAGE == 'true' && env.ENABLE_PUSH_IMAGE == 'true' && env.ENABLE_TRIGGER_DEPLOY == 'true' }}
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ env.DEPLOY_DISPATCH_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ env.DEPLOY_OWNER }}/${{ env.DEPLOY_REPOSITORY }}/actions/workflows/${{ env.DEPLOY_WORKFLOW }}/dispatches \
            -d '{"ref":"${{ env.DEPLOY_BRANCH }}","inputs":{}}'
