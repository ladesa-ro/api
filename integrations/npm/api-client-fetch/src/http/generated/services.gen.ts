// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type {
  AppControllerGetHelloResponse,
  ArquivoGetFileData,
  ArquivoGetFileResponse,
  AuthWhoAmIResponse,
  AuthLoginData,
  AuthLoginResponse,
  AuthRefreshData,
  AuthRefreshResponse,
  AuthSetInitialPasswordData,
  AuthSetInitialPasswordResponse,
  UsuarioListData,
  UsuarioListResponse,
  UsuarioCreateData,
  UsuarioCreateResponse,
  UsuarioFindByIdData,
  UsuarioFindByIdResponse,
  UsuarioUpdateByIdData,
  UsuarioUpdateByIdResponse,
  UsuarioDeleteByIdData,
  UsuarioDeleteByIdResponse,
  UsuarioGetCoverImageData,
  UsuarioGetCoverImageResponse,
  UsuarioSetCoverImageData,
  UsuarioSetCoverImageResponse,
  UsuarioGetProfileImageData,
  UsuarioGetProfileImageResponse,
  UsuarioSetProfileImageData,
  UsuarioSetProfileImageResponse,
  VinculoListData,
  VinculoListResponse,
  VinculoUpdateData,
  VinculoUpdateResponse,
  CampusListData,
  CampusListResponse,
  CampusCreateData,
  CampusCreateResponse,
  CampusFindByIdData,
  CampusFindByIdResponse,
  CampusUpdateByIdData,
  CampusUpdateByIdResponse,
  CampusDeleteByIdData,
  CampusDeleteByIdResponse,
  ModalidadeListData,
  ModalidadeListResponse,
  ModalidadeCreateData,
  ModalidadeCreateResponse,
  ModalidadeFindByIdData,
  ModalidadeFindByIdResponse,
  ModalidadeUpdateByIdData,
  ModalidadeUpdateByIdResponse,
  ModalidadeDeleteByIdData,
  ModalidadeDeleteByIdResponse,
  EstadoListData,
  EstadoListResponse,
  EstadoFindByIdData,
  EstadoFindByIdResponse,
  CidadeListData,
  CidadeListResponse,
  CidadeFindByIdData,
  CidadeFindByIdResponse,
  BlocoListData,
  BlocoListResponse,
  BlocoCreateData,
  BlocoCreateResponse,
  BlocoFindByIdData,
  BlocoFindByIdResponse,
  BlocoUpdateByIdData,
  BlocoUpdateByIdResponse,
  BlocoDeleteByIdData,
  BlocoDeleteByIdResponse,
  BlocoGetCoverImageData,
  BlocoGetCoverImageResponse,
  BlocoSetCoverImageData,
  BlocoSetCoverImageResponse,
  AmbienteListData,
  AmbienteListResponse,
  AmbienteCreateData,
  AmbienteCreateResponse,
  AmbienteFindByIdData,
  AmbienteFindByIdResponse,
  AmbienteUpdateByIdData,
  AmbienteUpdateByIdResponse,
  AmbienteDeleteByIdData,
  AmbienteDeleteByIdResponse,
  AmbienteGetCoverImageData,
  AmbienteGetCoverImageResponse,
  AmbienteSetCoverImageData,
  AmbienteSetCoverImageResponse,
  ReservaListData,
  ReservaListResponse,
  ReservaCreateData,
  ReservaCreateResponse,
  ReservaFindByIdData,
  ReservaFindByIdResponse,
  ReservaUpdateByIdData,
  ReservaUpdateByIdResponse,
  ReservaDeleteByIdData,
  ReservaDeleteByIdResponse,
  CursoListData,
  CursoListResponse,
  CursoCreateData,
  CursoCreateResponse,
  CursoFindByIdData,
  CursoFindByIdResponse,
  CursoUpdateByIdData,
  CursoUpdateByIdResponse,
  CursoDeleteByIdData,
  CursoDeleteByIdResponse,
  CursoGetCoverImageData,
  CursoGetCoverImageResponse,
  CursoSetCoverImageData,
  CursoSetCoverImageResponse,
  DisciplinaListData,
  DisciplinaListResponse,
  DisciplinaCreateData,
  DisciplinaCreateResponse,
  DisciplinaFindByIdData,
  DisciplinaFindByIdResponse,
  DisciplinaUpdateByIdData,
  DisciplinaUpdateByIdResponse,
  DisciplinaDeleteByIdData,
  DisciplinaDeleteByIdResponse,
  DisciplinaGetCoverImageData,
  DisciplinaGetCoverImageResponse,
  DisciplinaSetCoverImageData,
  DisciplinaSetCoverImageResponse,
  TurmaListData,
  TurmaListResponse,
  TurmaCreateData,
  TurmaCreateResponse,
  TurmaFindByIdData,
  TurmaFindByIdResponse,
  TurmaUpdateByIdData,
  TurmaUpdateByIdResponse,
  TurmaDeleteByIdData,
  TurmaDeleteByIdResponse,
  TurmaGetCoverImageData,
  TurmaGetCoverImageResponse,
  TurmaSetCoverImageData,
  TurmaSetCoverImageResponse,
  CalendarioLetivoListData,
  CalendarioLetivoListResponse,
  CalendarioLetivoCreateData,
  CalendarioLetivoCreateResponse,
  CalendarioLetivoFindByIdData,
  CalendarioLetivoFindByIdResponse,
  CalendarioLetivoUpdateByIdData,
  CalendarioLetivoUpdateByIdResponse,
  CalendarioLetivoDeleteByIdData,
  CalendarioLetivoDeleteByIdResponse,
  EventoListData,
  EventoListResponse,
  EventoCreateData,
  EventoCreateResponse,
  EventoFindByIdData,
  EventoFindByIdResponse,
  EventoUpdateByIdData,
  EventoUpdateByIdResponse,
  EventoDeleteByIdData,
  EventoDeleteByIdResponse,
  DiaCalendarioListData,
  DiaCalendarioListResponse,
  DiaCalendarioCreateData,
  DiaCalendarioCreateResponse,
  DiaCalendarioFindByIdData,
  DiaCalendarioFindByIdResponse,
  DiaCalendarioUpdateByIdData,
  DiaCalendarioUpdateByIdResponse,
  DiaCalendarioDeleteByIdData,
  DiaCalendarioDeleteByIdResponse,
  DiarioListData,
  DiarioListResponse,
  DiarioCreateData,
  DiarioCreateResponse,
  DiarioFindByIdData,
  DiarioFindByIdResponse,
  DiarioUpdateByIdData,
  DiarioUpdateByIdResponse,
  DiarioDeleteByIdData,
  DiarioDeleteByIdResponse,
  DiarioProfessorListData,
  DiarioProfessorListResponse,
  DiarioProfessorCreateData,
  DiarioProfessorCreateResponse,
  DiarioProfessorFindByIdData,
  DiarioProfessorFindByIdResponse,
  DiarioProfessorUpdateByIdData,
  DiarioProfessorUpdateByIdResponse,
  DiarioProfessorDeleteByIdData,
  DiarioProfessorDeleteByIdResponse,
  EtapaListData,
  EtapaListResponse,
  EtapaCreateData,
  EtapaCreateResponse,
  EtapaFindByIdData,
  EtapaFindByIdResponse,
  EtapaUpdateByIdData,
  EtapaUpdateByIdResponse,
  EtapaDeleteByIdData,
  EtapaDeleteByIdResponse,
  AulaListData,
  AulaListResponse,
  AulaCreateData,
  AulaCreateResponse,
  AulaFindByIdData,
  AulaFindByIdResponse,
  AulaUpdateByIdData,
  AulaUpdateByIdResponse,
  AulaDeleteByIdData,
  AulaDeleteByIdResponse,
  TurmaDisponibilidadeListData,
  TurmaDisponibilidadeListResponse,
  TurmaDisponibilidadeCreateData,
  TurmaDisponibilidadeCreateResponse,
  TurmaDisponibilidadeFindByIdData,
  TurmaDisponibilidadeFindByIdResponse,
  TurmaDisponibilidadeUpdateByIdData,
  TurmaDisponibilidadeUpdateByIdResponse,
  TurmaDisponibilidadeDeleteByIdData,
  TurmaDisponibilidadeDeleteByIdResponse,
  TurmaDisponibilidadeDiaListData,
  TurmaDisponibilidadeDiaListResponse,
  TurmaDisponibilidadeDiaCreateData,
  TurmaDisponibilidadeDiaCreateResponse,
  TurmaDisponibilidadeDiaFindByIdData,
  TurmaDisponibilidadeDiaFindByIdResponse,
  TurmaDisponibilidadeDiaUpdateByIdData,
  TurmaDisponibilidadeDiaUpdateByIdResponse,
  TurmaDisponibilidadeDiaDeleteByIdData,
  TurmaDisponibilidadeDiaDeleteByIdResponse,
} from './types.gen';

export class BaseService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns unknown Olá, Mundo!
   * @throws ApiError
   */
  public appControllerGetHello(): CancelablePromise<AppControllerGetHelloResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/',
    });
  }
}

export class ArquivosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Obtêm o conteúdo.
   * @param data The data for the request.
   * @param data.id
   * @param data.acessoRecursoId
   * @param data.acessoRecursoNome
   * @param data.nomeRecurso Acesso via recurso: nome
   * @param data.idRecurso Acesso via recurso: id
   * @returns binary Binário.
   * @throws ApiError
   */
  public arquivoGetFile(data: ArquivoGetFileData): CancelablePromise<ArquivoGetFileResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/arquivos/{id}',
      path: {
        id: data.id,
      },
      query: {
        'acesso.recurso.id': data.acessoRecursoId,
        'acesso.recurso.nome': data.acessoRecursoNome,
        nomeRecurso: data.nomeRecurso,
        idRecurso: data.idRecurso,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class AutenticacaoService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Obtêm informações sobre o estado de autenticação do ator.
   * @returns AuthWhoAmIResultDto Resposta da operação "AuthWhoAmI".
   * @throws ApiError
   */
  public authWhoAmI(): CancelablePromise<AuthWhoAmIResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/autenticacao/quem-sou-eu',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Obtêm as credenciais de sessão por meio do envio das credenciais do usuário.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AuthSessionCredentialsDto Resposta da operação "AuthLogin".
   * @throws ApiError
   */
  public authLogin(data: AuthLoginData): CancelablePromise<AuthLoginResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/autenticacao/login',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Obtêm as credenciais de sessão por meio do envio do token de refresh.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AuthSessionCredentialsDto Resposta da operação "AuthRefresh".
   * @throws ApiError
   */
  public authRefresh(data: AuthRefreshData): CancelablePromise<AuthRefreshResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/autenticacao/login/refresh',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Define a senha inicial do usuário
   * @param data The data for the request.
   * @param data.requestBody
   * @returns boolean Resposta da operação "AuthSetInitialPassword".
   * @throws ApiError
   */
  public authSetInitialPassword(data: AuthSetInitialPasswordData): CancelablePromise<AuthSetInitialPasswordResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/autenticacao/definir-senha',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class UsuariosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'UsuarioList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @returns UsuarioFindAllResultDto Resposta da operação "UsuarioList".
   * @throws ApiError
   */
  public usuarioList(data: UsuarioListData = {}): CancelablePromise<UsuarioListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/usuarios',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'UsuarioCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UsuarioFindOneResultDto Resposta da operação "UsuarioCreate".
   * @throws ApiError
   */
  public usuarioCreate(data: UsuarioCreateData): CancelablePromise<UsuarioCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/usuarios',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'UsuarioFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns UsuarioFindOneResultDto Resposta da operação "UsuarioFindById".
   * @throws ApiError
   */
  public usuarioFindById(data: UsuarioFindByIdData): CancelablePromise<UsuarioFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/usuarios/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns UsuarioFindOneResultDto Resposta da operação "UsuarioUpdateById".
   * @throws ApiError
   */
  public usuarioUpdateById(data: UsuarioUpdateByIdData): CancelablePromise<UsuarioUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/usuarios/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'UsuarioDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "UsuarioDeleteById".
   * @throws ApiError
   */
  public usuarioDeleteById(data: UsuarioDeleteByIdData): CancelablePromise<UsuarioDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/usuarios/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Obtêm a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns binary Binário.
   * @throws ApiError
   */
  public usuarioGetCoverImage(data: UsuarioGetCoverImageData): CancelablePromise<UsuarioGetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/usuarios/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Define a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.formData
   * @returns boolean Resposta da operação "UsuarioSetCoverImage".
   * @throws ApiError
   */
  public usuarioSetCoverImage(data: UsuarioSetCoverImageData): CancelablePromise<UsuarioSetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/usuarios/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Obtêm a imagem de perfil.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns binary Binário.
   * @throws ApiError
   */
  public usuarioGetProfileImage(data: UsuarioGetProfileImageData): CancelablePromise<UsuarioGetProfileImageResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/usuarios/{id}/imagem/perfil',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Define a imagem de perfil.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "UsuarioSetProfileImage".
   * @throws ApiError
   */
  public usuarioSetProfileImage(data: UsuarioSetProfileImageData): CancelablePromise<UsuarioSetProfileImageResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/usuarios/{id}/imagem/perfil',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class VinculosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'VinculoList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterAtivo Filtros para 'ativo'.
   * @param data.filterCampusId Filtros para 'campus.id'.
   * @param data.filterUsuarioId Filtros para 'usuario.id'.
   * @returns VinculoFindAllResultDto Resposta da operação "VinculoList".
   * @throws ApiError
   */
  public vinculoList(data: VinculoListData = {}): CancelablePromise<VinculoListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/vinculos',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.ativo': data.filterAtivo,
        'filter.campus.id': data.filterCampusId,
        'filter.usuario.id': data.filterUsuarioId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Dados de entrada para a alteração de vínculo de um Usuário a um Campus.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns VinculoFindAllResultDto Resposta da operação "VinculoUpdate".
   * @throws ApiError
   */
  public vinculoUpdate(data: VinculoUpdateData): CancelablePromise<VinculoUpdateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/vinculos',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class CampiService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'CampusList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterEnderecoCidadeId Filtros para 'endereco.cidade.id'.
   * @param data.filterEnderecoCidadeEstadoId Filtros para 'endereco.cidade.estado.id'.
   * @returns CampusFindAllResultDto Resposta da operação "CampusList".
   * @throws ApiError
   */
  public campusList(data: CampusListData = {}): CancelablePromise<CampusListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/campi',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.endereco.cidade.id': data.filterEnderecoCidadeId,
        'filter.endereco.cidade.estado.id': data.filterEnderecoCidadeEstadoId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'CampusCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CampusFindOneResultDto Resposta da operação "CampusCreate".
   * @throws ApiError
   */
  public campusCreate(data: CampusCreateData): CancelablePromise<CampusCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/campi',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'CampusFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns CampusFindOneResultDto Resposta da operação "CampusFindById".
   * @throws ApiError
   */
  public campusFindById(data: CampusFindByIdData): CancelablePromise<CampusFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/campi/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns CampusFindOneResultDto Resposta da operação "CampusUpdateById".
   * @throws ApiError
   */
  public campusUpdateById(data: CampusUpdateByIdData): CancelablePromise<CampusUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/campi/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'CampusDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "CampusDeleteById".
   * @throws ApiError
   */
  public campusDeleteById(data: CampusDeleteByIdData): CancelablePromise<CampusDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/campi/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class ModalidadesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'ModalidadeList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @returns ModalidadeFindAllResultDto Resposta da operação "ModalidadeList".
   * @throws ApiError
   */
  public modalidadeList(data: ModalidadeListData = {}): CancelablePromise<ModalidadeListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/modalidades',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'ModalidadeCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ModalidadeFindOneResultDto Resposta da operação "ModalidadeCreate".
   * @throws ApiError
   */
  public modalidadeCreate(data: ModalidadeCreateData): CancelablePromise<ModalidadeCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/modalidades',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'ModalidadeFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns ModalidadeFindOneResultDto Resposta da operação "ModalidadeFindById".
   * @throws ApiError
   */
  public modalidadeFindById(data: ModalidadeFindByIdData): CancelablePromise<ModalidadeFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/modalidades/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns ModalidadeFindOneResultDto Resposta da operação "ModalidadeUpdateById".
   * @throws ApiError
   */
  public modalidadeUpdateById(data: ModalidadeUpdateByIdData): CancelablePromise<ModalidadeUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/modalidades/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'ModalidadeDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "ModalidadeDeleteById".
   * @throws ApiError
   */
  public modalidadeDeleteById(data: ModalidadeDeleteByIdData): CancelablePromise<ModalidadeDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/modalidades/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class EstadosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'EstadoList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @returns EstadoFindAllResultDto Resposta da operação "EstadoList".
   * @throws ApiError
   */
  public estadoList(data: EstadoListData = {}): CancelablePromise<EstadoListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/base/estados',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'EstadoFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns EstadoFindOneResultDto Resposta da operação "EstadoFindById".
   * @throws ApiError
   */
  public estadoFindById(data: EstadoFindByIdData): CancelablePromise<EstadoFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/base/estados/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class CidadesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'CidadeList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterEstadoId Filtros para 'estado.id'.
   * @returns CidadeFindAllResultDto Resposta da operação "CidadeList".
   * @throws ApiError
   */
  public cidadeList(data: CidadeListData = {}): CancelablePromise<CidadeListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/base/cidades',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.estado.id': data.filterEstadoId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'CidadeFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns CidadeFindOneResultDto Resposta da operação "CidadeFindById".
   * @throws ApiError
   */
  public cidadeFindById(data: CidadeFindByIdData): CancelablePromise<CidadeFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/base/cidades/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class BlocosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'BlocoList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterCampusId Filtros para 'campus.id'.
   * @returns BlocoFindAllResultDto Resposta da operação "BlocoList".
   * @throws ApiError
   */
  public blocoList(data: BlocoListData = {}): CancelablePromise<BlocoListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/blocos',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.campus.id': data.filterCampusId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'BlocoCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns BlocoFindOneResultDto Resposta da operação "BlocoCreate".
   * @throws ApiError
   */
  public blocoCreate(data: BlocoCreateData): CancelablePromise<BlocoCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/blocos',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'BlocoFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns BlocoFindOneResultDto Resposta da operação "BlocoFindById".
   * @throws ApiError
   */
  public blocoFindById(data: BlocoFindByIdData): CancelablePromise<BlocoFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/blocos/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns BlocoFindOneResultDto Resposta da operação "BlocoUpdateById".
   * @throws ApiError
   */
  public blocoUpdateById(data: BlocoUpdateByIdData): CancelablePromise<BlocoUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/blocos/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'BlocoDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "BlocoDeleteById".
   * @throws ApiError
   */
  public blocoDeleteById(data: BlocoDeleteByIdData): CancelablePromise<BlocoDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/blocos/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Obtêm a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns binary Binário.
   * @throws ApiError
   */
  public blocoGetCoverImage(data: BlocoGetCoverImageData): CancelablePromise<BlocoGetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/blocos/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Define a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.formData
   * @returns boolean Resposta da operação "BlocoSetCoverImage".
   * @throws ApiError
   */
  public blocoSetCoverImage(data: BlocoSetCoverImageData): CancelablePromise<BlocoSetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/blocos/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class AmbientesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'AmbienteList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterBlocoId Filtros para 'bloco.id'.
   * @param data.filterBlocoCampusId Filtros para 'bloco.campus.id'.
   * @returns AmbienteFindAllResultDto Resposta da operação "AmbienteList".
   * @throws ApiError
   */
  public ambienteList(data: AmbienteListData = {}): CancelablePromise<AmbienteListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/ambientes',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.bloco.id': data.filterBlocoId,
        'filter.bloco.campus.id': data.filterBlocoCampusId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'AmbienteCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AmbienteFindOneResultDto Resposta da operação "AmbienteCreate".
   * @throws ApiError
   */
  public ambienteCreate(data: AmbienteCreateData): CancelablePromise<AmbienteCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/ambientes',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'AmbienteFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns AmbienteFindOneResultDto Resposta da operação "AmbienteFindById".
   * @throws ApiError
   */
  public ambienteFindById(data: AmbienteFindByIdData): CancelablePromise<AmbienteFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/ambientes/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns AmbienteFindOneResultDto Resposta da operação "AmbienteUpdateById".
   * @throws ApiError
   */
  public ambienteUpdateById(data: AmbienteUpdateByIdData): CancelablePromise<AmbienteUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/ambientes/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'AmbienteDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "AmbienteDeleteById".
   * @throws ApiError
   */
  public ambienteDeleteById(data: AmbienteDeleteByIdData): CancelablePromise<AmbienteDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/ambientes/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Obtêm a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns binary Binário.
   * @throws ApiError
   */
  public ambienteGetCoverImage(data: AmbienteGetCoverImageData): CancelablePromise<AmbienteGetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/ambientes/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Define a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.formData
   * @returns boolean Resposta da operação "AmbienteSetCoverImage".
   * @throws ApiError
   */
  public ambienteSetCoverImage(data: AmbienteSetCoverImageData): CancelablePromise<AmbienteSetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/ambientes/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class ReservasService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'ReservaList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @returns ReservaFindAllResultDto Resposta da operação "ReservaList".
   * @throws ApiError
   */
  public reservaList(data: ReservaListData = {}): CancelablePromise<ReservaListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/reservas',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'ReservaCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ReservaFindOneResultDto Resposta da operação "ReservaCreate".
   * @throws ApiError
   */
  public reservaCreate(data: ReservaCreateData): CancelablePromise<ReservaCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/reservas',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'ReservaFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns ReservaFindOneResultDto Resposta da operação "ReservaFindById".
   * @throws ApiError
   */
  public reservaFindById(data: ReservaFindByIdData): CancelablePromise<ReservaFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/reservas/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns ReservaFindOneResultDto Resposta da operação "ReservaUpdateById".
   * @throws ApiError
   */
  public reservaUpdateById(data: ReservaUpdateByIdData): CancelablePromise<ReservaUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/reservas/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'ReservaDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "ReservaDeleteById".
   * @throws ApiError
   */
  public reservaDeleteById(data: ReservaDeleteByIdData): CancelablePromise<ReservaDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/reservas/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class CursosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'CursoList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterCampusId Filtros para 'campus.id'.
   * @param data.filterModalidadeId Filtros para 'modalidade.id'.
   * @returns CursoFindAllResultDto Resposta da operação "CursoList".
   * @throws ApiError
   */
  public cursoList(data: CursoListData = {}): CancelablePromise<CursoListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/cursos',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.campus.id': data.filterCampusId,
        'filter.modalidade.id': data.filterModalidadeId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'CursoCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CursoFindOneResultDto Resposta da operação "CursoCreate".
   * @throws ApiError
   */
  public cursoCreate(data: CursoCreateData): CancelablePromise<CursoCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/cursos',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'CursoFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns CursoFindOneResultDto Resposta da operação "CursoFindById".
   * @throws ApiError
   */
  public cursoFindById(data: CursoFindByIdData): CancelablePromise<CursoFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/cursos/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns CursoFindOneResultDto Resposta da operação "CursoUpdateById".
   * @throws ApiError
   */
  public cursoUpdateById(data: CursoUpdateByIdData): CancelablePromise<CursoUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/cursos/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'CursoDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "CursoDeleteById".
   * @throws ApiError
   */
  public cursoDeleteById(data: CursoDeleteByIdData): CancelablePromise<CursoDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/cursos/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Obtêm a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns binary Binário.
   * @throws ApiError
   */
  public cursoGetCoverImage(data: CursoGetCoverImageData): CancelablePromise<CursoGetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/cursos/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Define a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.formData
   * @returns boolean Resposta da operação "CursoSetCoverImage".
   * @throws ApiError
   */
  public cursoSetCoverImage(data: CursoSetCoverImageData): CancelablePromise<CursoSetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/cursos/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class DisciplinasService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'DisciplinaList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @returns DisciplinaFindAllResultDto Resposta da operação "DisciplinaList".
   * @throws ApiError
   */
  public disciplinaList(data: DisciplinaListData = {}): CancelablePromise<DisciplinaListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/disciplinas',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DisciplinaCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns DisciplinaFindOneResultDto Resposta da operação "DisciplinaCreate".
   * @throws ApiError
   */
  public disciplinaCreate(data: DisciplinaCreateData): CancelablePromise<DisciplinaCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/disciplinas',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DisciplinaFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns DisciplinaFindOneResultDto Resposta da operação "DisciplinaFindById".
   * @throws ApiError
   */
  public disciplinaFindById(data: DisciplinaFindByIdData): CancelablePromise<DisciplinaFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/disciplinas/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns DisciplinaFindOneResultDto Resposta da operação "DisciplinaUpdateById".
   * @throws ApiError
   */
  public disciplinaUpdateById(data: DisciplinaUpdateByIdData): CancelablePromise<DisciplinaUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/disciplinas/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DisciplinaDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "DisciplinaDeleteById".
   * @throws ApiError
   */
  public disciplinaDeleteById(data: DisciplinaDeleteByIdData): CancelablePromise<DisciplinaDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/disciplinas/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Obtêm a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns binary Binário.
   * @throws ApiError
   */
  public disciplinaGetCoverImage(data: DisciplinaGetCoverImageData): CancelablePromise<DisciplinaGetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/disciplinas/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Define a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.formData
   * @returns boolean Resposta da operação "DisciplinaSetCoverImage".
   * @throws ApiError
   */
  public disciplinaSetCoverImage(data: DisciplinaSetCoverImageData): CancelablePromise<DisciplinaSetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/disciplinas/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class TurmasService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'TurmaList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterAmbientePadraoAulaNome Filtros para 'ambientePadraoAula.nome'.
   * @param data.filterAmbientePadraoAulaCodigo Filtros para 'ambientePadraoAula.codigo'.
   * @param data.filterAmbientePadraoAulaCapacidade Filtros para 'ambientePadraoAula.capacidade'.
   * @param data.filterAmbientePadraoAulaTipo Filtros para 'ambientePadraoAula.tipo'.
   * @param data.filterCursoNome Filtros para 'curso.nome'.
   * @param data.filterCursoNomeAbreviado Filtros para 'curso.nomeAbreviado'.
   * @param data.filterCursoCampusId Filtros para 'curso.campus.id'.
   * @param data.filterCursoModalidadeId Filtros para 'curso.modalidade.id'.
   * @returns TurmaFindAllResultDto Resposta da operação "TurmaList".
   * @throws ApiError
   */
  public turmaList(data: TurmaListData = {}): CancelablePromise<TurmaListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/turmas',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.ambientePadraoAula.nome': data.filterAmbientePadraoAulaNome,
        'filter.ambientePadraoAula.codigo': data.filterAmbientePadraoAulaCodigo,
        'filter.ambientePadraoAula.capacidade': data.filterAmbientePadraoAulaCapacidade,
        'filter.ambientePadraoAula.tipo': data.filterAmbientePadraoAulaTipo,
        'filter.curso.nome': data.filterCursoNome,
        'filter.curso.nomeAbreviado': data.filterCursoNomeAbreviado,
        'filter.curso.campus.id': data.filterCursoCampusId,
        'filter.curso.modalidade.id': data.filterCursoModalidadeId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'TurmaCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TurmaFindOneResultDto Resposta da operação "TurmaCreate".
   * @throws ApiError
   */
  public turmaCreate(data: TurmaCreateData): CancelablePromise<TurmaCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/turmas',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'TurmaFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns TurmaFindOneResultDto Resposta da operação "TurmaFindById".
   * @throws ApiError
   */
  public turmaFindById(data: TurmaFindByIdData): CancelablePromise<TurmaFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/turmas/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns TurmaFindOneResultDto Resposta da operação "TurmaUpdateById".
   * @throws ApiError
   */
  public turmaUpdateById(data: TurmaUpdateByIdData): CancelablePromise<TurmaUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/turmas/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'TurmaDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "TurmaDeleteById".
   * @throws ApiError
   */
  public turmaDeleteById(data: TurmaDeleteByIdData): CancelablePromise<TurmaDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/turmas/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Obtêm a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns binary Binário.
   * @throws ApiError
   */
  public turmaGetCoverImage(data: TurmaGetCoverImageData): CancelablePromise<TurmaGetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/turmas/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Define a imagem de capa.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.formData
   * @returns boolean Resposta da operação "TurmaSetCoverImage".
   * @throws ApiError
   */
  public turmaSetCoverImage(data: TurmaSetCoverImageData): CancelablePromise<TurmaSetCoverImageResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/turmas/{id}/imagem/capa',
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class CalendariosLetivosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'CalendarioLetivoList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterCampusId Filtros para 'campus.id'.
   * @param data.filterModalidadeId Filtros para 'modalidade.id'.
   * @returns CalendarioLetivoFindAllResultDto Resposta da operação "CalendarioLetivoList".
   * @throws ApiError
   */
  public calendarioLetivoList(data: CalendarioLetivoListData = {}): CancelablePromise<CalendarioLetivoListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/calendarios-letivos',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.campus.id': data.filterCampusId,
        'filter.modalidade.id': data.filterModalidadeId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'CalendarioLetivoCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CalendarioLetivoFindOneResultDto Resposta da operação "CalendarioLetivoCreate".
   * @throws ApiError
   */
  public calendarioLetivoCreate(data: CalendarioLetivoCreateData): CancelablePromise<CalendarioLetivoCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/calendarios-letivos',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'CalendarioLetivoFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns CalendarioLetivoFindOneResultDto Resposta da operação "CalendarioLetivoFindById".
   * @throws ApiError
   */
  public calendarioLetivoFindById(data: CalendarioLetivoFindByIdData): CancelablePromise<CalendarioLetivoFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/calendarios-letivos/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns CalendarioLetivoFindOneResultDto Resposta da operação "CalendarioLetivoUpdateById".
   * @throws ApiError
   */
  public calendarioLetivoUpdateById(data: CalendarioLetivoUpdateByIdData): CancelablePromise<CalendarioLetivoUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/calendarios-letivos/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'CalendarioLetivoDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "CalendarioLetivoDeleteById".
   * @throws ApiError
   */
  public calendarioLetivoDeleteById(data: CalendarioLetivoDeleteByIdData): CancelablePromise<CalendarioLetivoDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/calendarios-letivos/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class EventosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'EventoList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterCalendarioId Filtros para 'calendario.id'.
   * @returns EventoFindAllResultDto Resposta da operação "EventoList".
   * @throws ApiError
   */
  public eventoList(data: EventoListData = {}): CancelablePromise<EventoListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/eventos',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.calendario.id': data.filterCalendarioId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'EventoCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EventoFindOneResultDto Resposta da operação "EventoCreate".
   * @throws ApiError
   */
  public eventoCreate(data: EventoCreateData): CancelablePromise<EventoCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/eventos',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'EventoFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns EventoFindOneResultDto Resposta da operação "EventoFindById".
   * @throws ApiError
   */
  public eventoFindById(data: EventoFindByIdData): CancelablePromise<EventoFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/eventos/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns EventoFindOneResultDto Resposta da operação "EventoUpdateById".
   * @throws ApiError
   */
  public eventoUpdateById(data: EventoUpdateByIdData): CancelablePromise<EventoUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/eventos/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'EventoDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "EventoDeleteById".
   * @throws ApiError
   */
  public eventoDeleteById(data: EventoDeleteByIdData): CancelablePromise<EventoDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/eventos/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class DiasCalendarioService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'DiaCalendarioList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterCalendarioId Filtros para 'calendario.id'.
   * @returns DiaCalendarioFindAllResultDto Resposta da operação "DiaCalendarioList".
   * @throws ApiError
   */
  public diaCalendarioList(data: DiaCalendarioListData = {}): CancelablePromise<DiaCalendarioListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/dias-calendario',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.calendario.id': data.filterCalendarioId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DiaCalendarioCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns DiaCalendarioFindOneResultDto Resposta da operação "DiaCalendarioCreate".
   * @throws ApiError
   */
  public diaCalendarioCreate(data: DiaCalendarioCreateData): CancelablePromise<DiaCalendarioCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/dias-calendario',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DiaCalendarioFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns DiaCalendarioFindOneResultDto Resposta da operação "DiaCalendarioFindById".
   * @throws ApiError
   */
  public diaCalendarioFindById(data: DiaCalendarioFindByIdData): CancelablePromise<DiaCalendarioFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/dias-calendario/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns DiaCalendarioFindOneResultDto Resposta da operação "DiaCalendarioUpdateById".
   * @throws ApiError
   */
  public diaCalendarioUpdateById(data: DiaCalendarioUpdateByIdData): CancelablePromise<DiaCalendarioUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/dias-calendario/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DiaCalendarioDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "DiaCalendarioDeleteById".
   * @throws ApiError
   */
  public diaCalendarioDeleteById(data: DiaCalendarioDeleteByIdData): CancelablePromise<DiaCalendarioDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/dias-calendario/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class DiariosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'DiarioList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterTurmaId Filtros para 'turma.id'.
   * @param data.filterDisciplinaId Filtros para 'disciplina.id'.
   * @param data.filterAmbientePadraoId Filtros para 'ambientePadrao.id'.
   * @param data.filterCalendarioLetivoId Filtros para 'calendarioLetivo.id'.
   * @returns DiarioFindAllResultDto Resposta da operação "DiarioList".
   * @throws ApiError
   */
  public diarioList(data: DiarioListData = {}): CancelablePromise<DiarioListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/diarios',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.turma.id': data.filterTurmaId,
        'filter.disciplina.id': data.filterDisciplinaId,
        'filter.ambientePadrao.id': data.filterAmbientePadraoId,
        'filter.calendarioLetivo.id': data.filterCalendarioLetivoId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DiarioCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns DiarioFindOneResultDto Resposta da operação "DiarioCreate".
   * @throws ApiError
   */
  public diarioCreate(data: DiarioCreateData): CancelablePromise<DiarioCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/diarios',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DiarioFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns DiarioFindOneResultDto Resposta da operação "DiarioFindById".
   * @throws ApiError
   */
  public diarioFindById(data: DiarioFindByIdData): CancelablePromise<DiarioFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/diarios/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns DiarioFindOneResultDto Resposta da operação "DiarioUpdateById".
   * @throws ApiError
   */
  public diarioUpdateById(data: DiarioUpdateByIdData): CancelablePromise<DiarioUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/diarios/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DiarioDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "DiarioDeleteById".
   * @throws ApiError
   */
  public diarioDeleteById(data: DiarioDeleteByIdData): CancelablePromise<DiarioDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/diarios/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class DiarioProfessorService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'DiarioProfessorList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterVinculoId Filtros para 'vinculo.id'.
   * @param data.filterDiarioId Filtros para 'diario.id'.
   * @returns DiarioProfessorFindAllResultDto Resposta da operação "DiarioProfessorList".
   * @throws ApiError
   */
  public diarioProfessorList(data: DiarioProfessorListData = {}): CancelablePromise<DiarioProfessorListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/diario-professor',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.vinculo.id': data.filterVinculoId,
        'filter.diario.id': data.filterDiarioId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DiarioProfessorCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns DiarioProfessorFindOneResultDto Resposta da operação "DiarioProfessorCreate".
   * @throws ApiError
   */
  public diarioProfessorCreate(data: DiarioProfessorCreateData): CancelablePromise<DiarioProfessorCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/diario-professor',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DiarioProfessorFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns DiarioProfessorFindOneResultDto Resposta da operação "DiarioProfessorFindById".
   * @throws ApiError
   */
  public diarioProfessorFindById(data: DiarioProfessorFindByIdData): CancelablePromise<DiarioProfessorFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/diario-professor/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns DiarioProfessorFindOneResultDto Resposta da operação "DiarioProfessorUpdateById".
   * @throws ApiError
   */
  public diarioProfessorUpdateById(data: DiarioProfessorUpdateByIdData): CancelablePromise<DiarioProfessorUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/diario-professor/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'DiarioProfessorDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "DiarioProfessorDeleteById".
   * @throws ApiError
   */
  public diarioProfessorDeleteById(data: DiarioProfessorDeleteByIdData): CancelablePromise<DiarioProfessorDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/diario-professor/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class EtapasService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'EtapaList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterCalendarioId Filtros para 'calendario.id'.
   * @returns EtapaFindAllResultDto Resposta da operação "EtapaList".
   * @throws ApiError
   */
  public etapaList(data: EtapaListData = {}): CancelablePromise<EtapaListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/etapas',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.calendario.id': data.filterCalendarioId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'EtapaCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EtapaFindOneResultDto Resposta da operação "EtapaCreate".
   * @throws ApiError
   */
  public etapaCreate(data: EtapaCreateData): CancelablePromise<EtapaCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/etapas',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'EtapaFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns EtapaFindOneResultDto Resposta da operação "EtapaFindById".
   * @throws ApiError
   */
  public etapaFindById(data: EtapaFindByIdData): CancelablePromise<EtapaFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/etapas/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns EtapaFindOneResultDto Resposta da operação "EtapaUpdateById".
   * @throws ApiError
   */
  public etapaUpdateById(data: EtapaUpdateByIdData): CancelablePromise<EtapaUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/etapas/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'EtapaDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "EtapaDeleteById".
   * @throws ApiError
   */
  public etapaDeleteById(data: EtapaDeleteByIdData): CancelablePromise<EtapaDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/etapas/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class AulasService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'AulaList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterDiarioId Filtros para 'diario.id'.
   * @param data.filterAmbienteId Filtros para 'ambiente.id'.
   * @returns AulaFindAllResultDto Resposta da operação "AulaList".
   * @throws ApiError
   */
  public aulaList(data: AulaListData = {}): CancelablePromise<AulaListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/aulas',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.diario.id': data.filterDiarioId,
        'filter.ambiente.id': data.filterAmbienteId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'AulaCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AulaFindOneResultDto Resposta da operação "AulaCreate".
   * @throws ApiError
   */
  public aulaCreate(data: AulaCreateData): CancelablePromise<AulaCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/aulas',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'AulaFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns AulaFindOneResultDto Resposta da operação "AulaFindById".
   * @throws ApiError
   */
  public aulaFindById(data: AulaFindByIdData): CancelablePromise<AulaFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/aulas/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns AulaFindOneResultDto Resposta da operação "AulaUpdateById".
   * @throws ApiError
   */
  public aulaUpdateById(data: AulaUpdateByIdData): CancelablePromise<AulaUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/aulas/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'AulaDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "AulaDeleteById".
   * @throws ApiError
   */
  public aulaDeleteById(data: AulaDeleteByIdData): CancelablePromise<AulaDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/aulas/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class TurmasDisponibilidadeService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'TurmaDisponibilidadeList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterTurmaId Filtros para 'turma.id'.
   * @returns TurmaDisponibilidadeFindAllResultDto Resposta da operação "TurmaDisponibilidadeList".
   * @throws ApiError
   */
  public turmaDisponibilidadeList(data: TurmaDisponibilidadeListData = {}): CancelablePromise<TurmaDisponibilidadeListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/turmas-disponibilidade',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.turma.id': data.filterTurmaId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'TurmaDisponibilidadeCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TurmaDisponibilidadeFindOneResultDto Resposta da operação "TurmaDisponibilidadeCreate".
   * @throws ApiError
   */
  public turmaDisponibilidadeCreate(data: TurmaDisponibilidadeCreateData): CancelablePromise<TurmaDisponibilidadeCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/turmas-disponibilidade',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'TurmaDisponibilidadeFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns TurmaDisponibilidadeFindOneResultDto Resposta da operação "TurmaDisponibilidadeFindById".
   * @throws ApiError
   */
  public turmaDisponibilidadeFindById(data: TurmaDisponibilidadeFindByIdData): CancelablePromise<TurmaDisponibilidadeFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/turmas-disponibilidade/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns TurmaDisponibilidadeFindOneResultDto Resposta da operação "TurmaDisponibilidadeUpdateById".
   * @throws ApiError
   */
  public turmaDisponibilidadeUpdateById(data: TurmaDisponibilidadeUpdateByIdData): CancelablePromise<TurmaDisponibilidadeUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/turmas-disponibilidade/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'TurmaDisponibilidadeDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "TurmaDisponibilidadeDeleteById".
   * @throws ApiError
   */
  public turmaDisponibilidadeDeleteById(data: TurmaDisponibilidadeDeleteByIdData): CancelablePromise<TurmaDisponibilidadeDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/turmas-disponibilidade/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}

export class TurmasDisponibilidadeDiaService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Operação 'TurmaDisponibilidadeDiaList'.
   * @param data The data for the request.
   * @param data.page Página da listagem.
   * @param data.limit Limite de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Configurações de ordenamento.
   * @param data.filterIntervaloDeTempoId Filtros para 'intervaloDeTempo.id'.
   * @param data.filterTurmaDisponibilidadeId Filtros para 'turmaDisponibilidade.id'.
   * @returns TurmaDisponibilidadeDiaFindAllResultDto Resposta da operação "TurmaDisponibilidadeDiaList".
   * @throws ApiError
   */
  public turmaDisponibilidadeDiaList(data: TurmaDisponibilidadeDiaListData = {}): CancelablePromise<TurmaDisponibilidadeDiaListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/turmas-disponibilidade-dia',
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        'filter.intervaloDeTempo.id': data.filterIntervaloDeTempoId,
        'filter.turmaDisponibilidade.id': data.filterTurmaDisponibilidadeId,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'TurmaDisponibilidadeDiaCreate'.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TurmaDisponibilidadeDiaFindOneResultDto Resposta da operação "TurmaDisponibilidadeDiaCreate".
   * @throws ApiError
   */
  public turmaDisponibilidadeDiaCreate(data: TurmaDisponibilidadeDiaCreateData): CancelablePromise<TurmaDisponibilidadeDiaCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/turmas-disponibilidade-dia',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'TurmaDisponibilidadeDiaFindById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns TurmaDisponibilidadeDiaFindOneResultDto Resposta da operação "TurmaDisponibilidadeDiaFindById".
   * @throws ApiError
   */
  public turmaDisponibilidadeDiaFindById(data: TurmaDisponibilidadeDiaFindByIdData): CancelablePromise<TurmaDisponibilidadeDiaFindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/turmas-disponibilidade-dia/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Update operation
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @param data.requestBody
   * @returns TurmaDisponibilidadeDiaFindOneResultDto Resposta da operação "TurmaDisponibilidadeDiaUpdateById".
   * @throws ApiError
   */
  public turmaDisponibilidadeDiaUpdateById(data: TurmaDisponibilidadeDiaUpdateByIdData): CancelablePromise<TurmaDisponibilidadeDiaUpdateByIdResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/turmas-disponibilidade-dia/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }

  /**
   * Operação 'TurmaDisponibilidadeDiaDeleteById'.
   * @param data The data for the request.
   * @param data.id ID do Registro.
   * @returns boolean Resposta da operação "TurmaDisponibilidadeDiaDeleteById".
   * @throws ApiError
   */
  public turmaDisponibilidadeDiaDeleteById(data: TurmaDisponibilidadeDiaDeleteByIdData): CancelablePromise<TurmaDisponibilidadeDiaDeleteByIdResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/turmas-disponibilidade-dia/{id}',
      path: {
        id: data.id,
      },
      errors: {
        403: 'O solicitante não tem permissão para executar esta ação.',
        404: 'Registro não encontrado.',
      },
    });
  }
}
