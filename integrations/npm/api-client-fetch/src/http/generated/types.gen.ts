// This file is auto-generated by @hey-api/openapi-ts

export type ArquivoFindOneResultDto = {
  /**
   * Nome.
   */
  name: string;
  /**
   * Mime-type.
   */
  mimeType: string;
  /**
   * Tamanho (em bytes).
   */
  sizeBytes: number;
  /**
   * Estratégia de armazenamento.
   */
  storageType: string;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type ImagemArquivoFindOneFromImagemResultDto = {
  /**
   * Largura da imagem.
   */
  largura: number | null;
  /**
   * Altura da imagem.
   */
  altura: number | null;
  /**
   * Formato da imagem.
   */
  formato: string;
  /**
   * Mime Type da imagem.
   */
  mimeType: string;
  /**
   * Arquivo.
   */
  arquivo: ArquivoFindOneResultDto;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type ImagemDto = {
  /**
   * Descrição.
   */
  descricao: string;
  /**
   * Versões.
   */
  versoes: Array<ImagemArquivoFindOneFromImagemResultDto>;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type UsuarioFindOneResultDto = {
  /**
   * Nome do usuário.
   */
  nome: string;
  /**
   * Matrícula Siape do usuário.
   */
  matriculaSiape: string;
  /**
   * E-mail do usuário.
   */
  email: string;
  /**
   * Indentifica é um super usuário.
   */
  isSuperUser: boolean;
  /**
   * Imagem de capa
   */
  imagemCapa: ImagemDto | null;
  /**
   * Imagem de perfil
   */
  imagemPerfil: ImagemDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type AuthWhoAmIResultDto = {
  /**
   * Usuário autenticado.
   */
  usuario: UsuarioFindOneResultDto | null;
};

export type AuthLoginInputDto = {
  /**
   * Matrícula SIAPE.
   */
  matriculaSiape: string;
  /**
   * Senha do usuário.
   */
  senha: string;
};

export type AuthSessionCredentialsDto = {
  /**
   * Token de acesso.
   */
  access_token: string | null;
  /**
   * Tipo do token.
   */
  token_type: string | null;
  /**
   * Token de identificação.
   */
  id_token: string | null;
  /**
   * Token de refresh.
   */
  refresh_token: string | null;
  /**
   * Tempo de expiração do token.
   */
  expires_in: number | null;
  /**
   * Tempo de expiração do token.
   */
  expires_at: number | null;
  /**
   * Estado da sessão.
   */
  session_state: string | null;
  /**
   * Escopo da autenticação.
   */
  scope: string | null;
};

export type AuthRefreshInputDto = {
  /**
   * Token de refresh.
   */
  refreshToken: string;
};

export type AuthSetInitialPasswordInputDto = {
  /**
   * Matrícula SIAPE.
   */
  matriculaSiape: string;
  /**
   * Nova senha.
   */
  senha: string;
};

export type PaginatedSortByDto = {
  /**
   * Propriedade ordenada.
   */
  property: string;
  /**
   * Modo de ordenação.
   */
  mode: string;
};

export type PaginatedResultMetaFilterDto = {
  /**
   * Propriedade filtrada.
   */
  property: string;
  /**
   * Restrições de filtragem
   */
  restrictions: Array<string>;
};

export type PaginatedResultMetaDto = {
  /**
   * Quantidade de itens por página.
   */
  itemsPerPage: number;
  /**
   * Total de itens.
   */
  totalItems: number;
  /**
   * Página atual.
   */
  currentPage: number;
  /**
   * Quantidade total de páginas.
   */
  totalPages: number;
  /**
   * Termo textual da busca.
   */
  search: string;
  /**
   * Ordenação.
   */
  sortBy: Array<PaginatedSortByDto>;
  /**
   * Filtros
   */
  filter: Array<PaginatedResultMetaFilterDto>;
};

export type PaginatedResultLinksDto = {
  first: string | null;
  previous: string | null;
  current: string;
  next: string | null;
  last: string | null;
};

export type UsuarioFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<UsuarioFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type UsuarioInputCreateDto = {
  /**
   * Nome do usuário.
   */
  nome: string;
  /**
   * Matrícula Siape do usuário.
   */
  matriculaSiape: string;
  /**
   * E-mail do usuário.
   */
  email: string;
};

export type UsuarioInputUpdateDto = {
  /**
   * Nome do usuário.
   */
  nome?: string;
  /**
   * Matrícula Siape do usuário.
   */
  matriculaSiape?: string;
  /**
   * E-mail do usuário.
   */
  email?: string;
};

export type EstadoFindOneResultDto = {
  /**
   * Nome oficial do Estado.
   */
  nome: string;
  /**
   * Sigla do Estado.
   */
  sigla: string;
  /**
   * ID do Registro.
   */
  id: number;
};

export type CidadeFindOneResultDto = {
  /**
   * Nome oficial da Cidade.
   */
  nome: string;
  /**
   * Estado da Cidade.
   */
  estado: EstadoFindOneResultDto;
  /**
   * ID do Registro.
   */
  id: number;
};

export type EnderecoFindOneResultDto = {
  cep: string;
  /**
   * Logradouro
   */
  logradouro: string;
  /**
   * Número
   */
  numero: number;
  /**
   * Bairro
   */
  bairro: string;
  /**
   * Complemento
   */
  complemento: string | null;
  /**
   * Ponto de referência
   */
  pontoReferencia: string | null;
  /**
   * Cidade
   */
  cidade: CidadeFindOneResultDto;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type CampusFindOneResultDto = {
  /**
   * Nome fantasia do Campus.
   */
  nomeFantasia: string;
  /**
   * Razão social do Campus.
   */
  razaoSocial: string;
  /**
   * Apelido do Campus.
   */
  apelido: string;
  /**
   * CNPJ do Campus.
   */
  cnpj: string;
  /**
   * Endereço do Campus
   */
  endereco: EnderecoFindOneResultDto;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type VinculoFindOneResultDto = {
  /**
   * Indica se o vínculo está ativo.
   */
  ativo: boolean;
  /**
   * Cargo do usuário no vínculo.
   */
  cargo: string;
  /**
   * Campus associado ao vínculo.
   */
  campus: CampusFindOneResultDto;
  /**
   * Usuário associado ao vínculo.
   */
  usuario: UsuarioFindOneResultDto;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type VinculoFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<VinculoFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type CampusFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type UsuarioFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type VinculoUpdateInputDto = {
  /**
   * Campus associado ao vínculo.
   */
  campus: CampusFindOneInputDto;
  /**
   * Usuário associado ao vínculo.
   */
  usuario: UsuarioFindOneInputDto;
  /**
   * Cargos do usuário no vínculo.
   */
  cargos: Array<string>;
};

export type CampusFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<CampusFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type CidadeFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: number;
};

export type EnderecoInputDto = {
  cep: string;
  /**
   * Logradouro
   */
  logradouro: string;
  /**
   * Número
   */
  numero: number;
  /**
   * Bairro
   */
  bairro: string;
  /**
   * Complemento
   */
  complemento: string | null;
  /**
   * Ponto de referência
   */
  pontoReferencia: string | null;
  /**
   * Cidade
   */
  cidade: CidadeFindOneInputDto;
};

export type CampusInputCreateDto = {
  /**
   * Nome fantasia do Campus.
   */
  nomeFantasia: string;
  /**
   * Razão social do Campus.
   */
  razaoSocial: string;
  /**
   * Apelido do Campus.
   */
  apelido: string;
  /**
   * CNPJ do Campus.
   */
  cnpj: string;
  /**
   * Endereço do Campus
   */
  endereco: EnderecoInputDto;
};

export type CampusInputUpdateDto = {
  /**
   * Nome fantasia do Campus.
   */
  nomeFantasia?: string;
  /**
   * Razão social do Campus.
   */
  razaoSocial?: string;
  /**
   * Apelido do Campus.
   */
  apelido?: string;
  /**
   * CNPJ do Campus.
   */
  cnpj?: string;
  /**
   * Endereço do Campus
   */
  endereco?: EnderecoInputDto;
};

export type ModalidadeFindOneResultDto = {
  /**
   * Nome da modalidade.
   */
  nome: string;
  /**
   * Slug da modalidade.
   */
  slug: string;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type ModalidadeFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<ModalidadeFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type ModalidadeInputCreateDto = {
  /**
   * Nome da modalidade.
   */
  nome: string;
  /**
   * Slug da modalidade.
   */
  slug: string;
};

export type ModalidadeInputUpdateDto = {
  /**
   * Nome da modalidade.
   */
  nome?: string;
  /**
   * Slug da modalidade.
   */
  slug?: string;
};

export type EstadoFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<EstadoFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type CidadeFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<CidadeFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type ImagemFindOneResultDto = {
  /**
   * Descrição.
   */
  descricao: string;
  /**
   * Versões.
   */
  versoes: Array<ImagemArquivoFindOneFromImagemResultDto>;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type BlocoFindOneResultDto = {
  /**
   * Nome do Bloco.
   */
  nome: string;
  /**
   * Código do Bloco.
   */
  codigo: string;
  /**
   * Campus.
   */
  campus: CampusFindOneResultDto;
  /**
   * Imagem de capa
   */
  imagemCapa: ImagemFindOneResultDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type BlocoFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<BlocoFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type BlocoInputCreateDto = {
  /**
   * Nome do Bloco.
   */
  nome: string;
  /**
   * Código do Bloco.
   */
  codigo: string;
  /**
   * Campus.
   */
  campus: CampusFindOneInputDto;
};

export type BlocoInputUpdateDto = {
  /**
   * Nome do Bloco.
   */
  nome?: string;
  /**
   * Código do Bloco.
   */
  codigo?: string;
  /**
   * Campus.
   */
  campus?: CampusFindOneInputDto;
};

export type AmbienteFindOneResultDto = {
  /**
   * Nome do ambiente/sala.
   */
  nome: string;
  /**
   * Descrição do ambiente/sala.
   */
  descricao: string | null;
  /**
   * Código do ambiente/sala.
   */
  codigo: string;
  /**
   * Capacidade do ambiente/sala.
   */
  capacidade: number | null;
  /**
   * Tipo do ambiente/sala. Ex.: sala aula, auditório, laboratório de química.
   */
  tipo: string | null;
  /**
   * Bloco que o ambiente/sala pertence.
   */
  bloco: BlocoFindOneResultDto;
  /**
   * Imagem de capa
   */
  imagemCapa: ImagemFindOneResultDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type AmbienteFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<AmbienteFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type BlocoFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type AmbienteInputCreateDto = {
  /**
   * Nome do ambiente/sala.
   */
  nome: string;
  /**
   * Descrição do ambiente/sala.
   */
  descricao?: string | null;
  /**
   * Código do ambiente/sala.
   */
  codigo: string;
  /**
   * Capacidade do ambiente/sala.
   */
  capacidade: number | null;
  /**
   * Tipo do ambiente/sala. Ex.: sala aula, auditório, laboratório de química.
   */
  tipo: string | null;
  /**
   * Bloco que o ambiente/sala pertence.
   */
  bloco: BlocoFindOneInputDto;
};

export type AmbienteInputUpdateDto = {
  /**
   * Nome do ambiente/sala.
   */
  nome?: string;
  /**
   * Descrição do ambiente/sala.
   */
  descricao?: string | null;
  /**
   * Código do ambiente/sala.
   */
  codigo?: string;
  /**
   * Capacidade do ambiente/sala.
   */
  capacidade?: number | null;
  /**
   * Tipo do ambiente/sala. Ex.: sala aula, auditório, laboratório de química.
   */
  tipo?: string | null;
  /**
   * Bloco que o ambiente/sala pertence.
   */
  bloco?: BlocoFindOneInputDto;
};

export type ReservaFindOneResultDto = {
  /**
   * Situação da reserva.
   */
  situacao: string;
  /**
   * Motivo da reserva.
   */
  motivo: string | null;
  /**
   * Definir tipo da reserva.
   */
  tipo: string | null;
  /**
   * Data e hora de início da reserva.
   */
  dataInicio: string;
  /**
   * Data e hora de término da reserva.
   */
  dataTermino: string | null;
  /**
   * Usuário que fez a reserva.
   */
  usuario: UsuarioFindOneResultDto;
  /**
   * Ambiente que foi reservado.
   */
  ambiente: AmbienteFindOneResultDto;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type ReservaFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<ReservaFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type AmbienteFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type ReservaInputCreateDto = {
  /**
   * Situação da reserva.
   */
  situacao: string;
  /**
   * Motivo da reserva.
   */
  motivo: string | null;
  /**
   * Definir tipo da reserva.
   */
  tipo: string | null;
  /**
   * Data e hora de início da reserva.
   */
  dataInicio: string;
  /**
   * Data e hora de término da reserva.
   */
  dataTermino: string | null;
  /**
   * Usuário que fez a reserva.
   */
  usuario: UsuarioFindOneInputDto;
  /**
   * Ambiente que foi reservado.
   */
  ambiente: AmbienteFindOneInputDto;
};

export type ReservaInputUpdateDto = {
  /**
   * Situação da reserva.
   */
  situacao?: string;
  /**
   * Motivo da reserva.
   */
  motivo?: string | null;
  /**
   * Definir tipo da reserva.
   */
  tipo?: string | null;
  /**
   * Data e hora de início da reserva.
   */
  dataInicio?: string;
  /**
   * Data e hora de término da reserva.
   */
  dataTermino?: string | null;
  /**
   * Usuário que fez a reserva.
   */
  usuario?: UsuarioFindOneInputDto;
  /**
   * Ambiente que foi reservado.
   */
  ambiente?: AmbienteFindOneInputDto;
};

export type CursoFindOneResultDto = {
  /**
   * Nome do curso.
   */
  nome: string;
  /**
   * Nome abreviado do curso.
   */
  nomeAbreviado: string;
  /**
   * Campus que o curso pertence.
   */
  campus: CampusFindOneResultDto;
  /**
   * Modalidade a que o curso pertence.
   */
  modalidade: ModalidadeFindOneResultDto;
  /**
   * Imagem de capa
   */
  imagemCapa: ImagemFindOneResultDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type CursoFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<CursoFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type ModalidadeFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type CursoInputCreateDto = {
  /**
   * Nome do curso.
   */
  nome: string;
  /**
   * Nome abreviado do curso.
   */
  nomeAbreviado: string;
  /**
   * Campus que o curso pertence.
   */
  campus: CampusFindOneInputDto;
  /**
   * Modalidade a que o curso pertence.
   */
  modalidade: ModalidadeFindOneInputDto;
};

export type CursoInputUpdateDto = {
  /**
   * Nome do curso.
   */
  nome?: string;
  /**
   * Nome abreviado do curso.
   */
  nomeAbreviado?: string;
  /**
   * Campus que o curso pertence.
   */
  campus?: CampusFindOneInputDto;
  /**
   * Modalidade a que o curso pertence.
   */
  modalidade?: ModalidadeFindOneInputDto;
};

export type DisciplinaFindOneResultDto = {
  /**
   * Nome da disciplina.
   */
  nome: string;
  /**
   * Nome abreviado da disciplina.
   */
  nomeAbreviado: string;
  /**
   * Carga horária da disciplina.
   */
  cargaHoraria: number;
  /**
   * Imagem de capa
   */
  imagemCapa: ImagemFindOneResultDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type DisciplinaFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<DisciplinaFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type DisciplinaInputCreateDto = {
  /**
   * Nome da disciplina.
   */
  nome: string;
  /**
   * Nome abreviado da disciplina.
   */
  nomeAbreviado: string;
  /**
   * Carga horária da disciplina.
   */
  cargaHoraria: number;
};

export type DisciplinaInputUpdateDto = {
  /**
   * Nome da disciplina.
   */
  nome?: string;
  /**
   * Nome abreviado da disciplina.
   */
  nomeAbreviado?: string;
  /**
   * Carga horária da disciplina.
   */
  cargaHoraria?: number;
};

export type TurmaFindOneResultDto = {
  /**
   * Período do Turma.
   */
  periodo: string;
  /**
   * Curso da Turma.
   */
  curso: CursoFindOneResultDto;
  /**
   * Ambiente padrão da sala de aula.
   */
  ambientePadraoAula?: AmbienteFindOneResultDto | null;
  /**
   * Imagem de capa
   */
  imagemCapa: ImagemFindOneResultDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type TurmaFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<TurmaFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type CursoFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type TurmaInputCreateDto = {
  /**
   * Período do Turma.
   */
  periodo: string;
  /**
   * Curso da Turma.
   */
  curso: CursoFindOneInputDto;
  /**
   * Ambiente padrão da sala de aula.
   */
  ambientePadraoAula?: AmbienteFindOneInputDto | null;
};

export type TurmaInputUpdateDto = {
  /**
   * Período do Turma.
   */
  periodo?: string;
  /**
   * Curso da Turma.
   */
  curso?: CursoFindOneInputDto;
  /**
   * Ambiente padrão da sala de aula.
   */
  ambientePadraoAula?: AmbienteFindOneInputDto | null;
};

export type CalendarioLetivoFindOneResultDto = {
  /**
   * Nome do calendário letivo.
   */
  nome: string;
  /**
   * Ano do calendário letivo.
   */
  ano: number;
  /**
   * Campus.
   */
  campus: CampusFindOneResultDto;
  /**
   * Modalidade.
   */
  modalidade: ModalidadeFindOneResultDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type CalendarioLetivoFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<CalendarioLetivoFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type CalendarioLetivoInputCreateDto = {
  /**
   * Nome do calendário letivo.
   */
  nome: string;
  /**
   * Ano do calendário letivo.
   */
  ano: number;
  /**
   * Campus.
   */
  campus: CampusFindOneInputDto;
  /**
   * Modalidade.
   */
  modalidade: ModalidadeFindOneInputDto | null;
};

export type CalendarioLetivoInputUpdateDto = {
  /**
   * Nome do calendário letivo.
   */
  nome?: string;
  /**
   * Ano do calendário letivo.
   */
  ano?: number;
  /**
   * Campus.
   */
  campus?: CampusFindOneInputDto;
  /**
   * Modalidade.
   */
  modalidade?: ModalidadeFindOneInputDto | null;
};

export type EventoFindOneResultDto = {
  /**
   * Nome do evento.
   */
  nome: string | null;
  /**
   * Data de início.
   */
  dataInicio: string;
  /**
   * Data de término.
   */
  dataTermino: string;
  /**
   * Cor da Evento.
   */
  cor: string | null;
  /**
   * Calendario.
   */
  calendario: CalendarioLetivoFindOneResultDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type EventoFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<EventoFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type CalendarioLetivoFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type EventoInputCreateDto = {
  /**
   * Nome do evento.
   */
  nome: string | null;
  /**
   * Data de início.
   */
  dataInicio: string;
  /**
   * Data de término.
   */
  dataTermino: string;
  /**
   * Cor da Evento.
   */
  cor: string | null;
  /**
   * Calendario.
   */
  calendario: CalendarioLetivoFindOneInputDto | null;
};

export type EventoInputUpdateDto = {
  /**
   * Nome do evento.
   */
  nome?: string | null;
  /**
   * Data de início.
   */
  dataInicio?: string;
  /**
   * Data de término.
   */
  dataTermino?: string;
  /**
   * Cor da Evento.
   */
  cor?: string | null;
  /**
   * Calendario.
   */
  calendario?: CalendarioLetivoFindOneInputDto | null;
};

export type DiaCalendarioFindOneResultDto = {
  /**
   * Data.
   */
  data: string;
  /**
   * Define que o dia é letivo.
   */
  diaLetivo: boolean;
  /**
   * Define que o dia é feriado.
   */
  feriado: boolean;
  /**
   * Calendario.
   */
  calendario: CalendarioLetivoFindOneResultDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type DiaCalendarioFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<DiaCalendarioFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type DiaCalendarioInputCreateDto = {
  /**
   * Data.
   */
  data: string;
  /**
   * Define que o dia é letivo.
   */
  diaLetivo: boolean;
  /**
   * Define que o dia é feriado.
   */
  feriado: boolean;
  /**
   * Calendario.
   */
  calendario: CalendarioLetivoFindOneInputDto | null;
};

export type DiaCalendarioInputUpdateDto = {
  /**
   * Data.
   */
  data?: string;
  /**
   * Define que o dia é letivo.
   */
  diaLetivo?: boolean;
  /**
   * Define que o dia é feriado.
   */
  feriado?: boolean;
  /**
   * Calendario.
   */
  calendario?: CalendarioLetivoFindOneInputDto | null;
};

export type DiarioFindOneResultDto = {
  /**
   * Calendário Letivo vinculado ao diário.
   */
  calendarioLetivo: CalendarioLetivoFindOneResultDto;
  /**
   * Turma vinculada ao diário.
   */
  turma: TurmaFindOneResultDto;
  /**
   * Disciplina vinculada ao diário.
   */
  disciplina: DisciplinaFindOneResultDto;
  /**
   * Ambiente padrão.
   */
  ambientePadrao: AmbienteFindOneResultDto | null;
  /**
   * Imagem de capa
   */
  imagemCapa: ImagemFindOneResultDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type DiarioFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<DiarioFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type TurmaFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DisciplinaFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DiarioInputCreateDto = {
  /**
   * Situação do diário.
   */
  ativo?: boolean;
  /**
   * Calendário Letivo vinculado ao diário.
   */
  calendarioLetivo: CalendarioLetivoFindOneInputDto;
  /**
   * Turma vinculada ao diário.
   */
  turma: TurmaFindOneInputDto;
  /**
   * Disciplina vinculada ao diário.
   */
  disciplina: DisciplinaFindOneInputDto;
  /**
   * Ambiente padrão.
   */
  ambientePadrao: AmbienteFindOneInputDto | null;
};

export type DiarioInputUpdateDto = {
  /**
   * Situação do diário.
   */
  ativo?: boolean;
  /**
   * Calendário Letivo vinculado ao diário.
   */
  calendarioLetivo?: CalendarioLetivoFindOneInputDto;
  /**
   * Turma vinculada ao diário.
   */
  turma?: TurmaFindOneInputDto;
  /**
   * Disciplina vinculada ao diário.
   */
  disciplina?: DisciplinaFindOneInputDto;
  /**
   * Ambiente padrão.
   */
  ambientePadrao?: AmbienteFindOneInputDto | null;
};

export type DiarioProfessorFindOneResultDto = {
  /**
   * Situação do vínculo.
   */
  situacao: boolean;
  /**
   * Vínculo do usuário ao campus.
   */
  vinculo: VinculoFindOneResultDto;
  /**
   * Diário vinculado.
   */
  diario: DiarioFindOneResultDto;
  /**
   * ID do Registro.
   */
  id: string;
};

export type DiarioProfessorFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<DiarioProfessorFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type VinculoFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DiarioFindOneInputDto = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DiarioProfessorInputCreateDto = {
  /**
   * Situação do vínculo.
   */
  situacao: boolean;
  /**
   * Vínculo do usuário ao campus.
   */
  vinculo: VinculoFindOneInputDto;
  /**
   * Diário vinculado.
   */
  diario: DiarioFindOneInputDto;
};

export type DiarioProfessorInputUpdateDto = {
  /**
   * Situação do vínculo.
   */
  situacao?: boolean;
  /**
   * Vínculo do usuário ao campus.
   */
  vinculo?: VinculoFindOneInputDto;
  /**
   * Diário vinculado.
   */
  diario?: DiarioFindOneInputDto;
};

export type EtapaFindOneResultDto = {
  /**
   * Número da etapa.
   */
  numero: number | null;
  /**
   * Data de início.
   */
  dataInicio: string;
  /**
   * Data de término.
   */
  dataTermino: string;
  /**
   * Cor da etapa.
   */
  cor: string | null;
  /**
   * Calendario.
   */
  calendario: CalendarioLetivoFindOneResultDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type EtapaFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<EtapaFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type EtapaInputCreateDto = {
  /**
   * Número da etapa.
   */
  numero: number | null;
  /**
   * Data de início.
   */
  dataInicio: string;
  /**
   * Data de término.
   */
  dataTermino: string;
  /**
   * Cor da etapa.
   */
  cor: string | null;
  /**
   * Calendario.
   */
  calendario: CalendarioLetivoFindOneInputDto | null;
};

export type EtapaInputUpdateDto = {
  /**
   * Número da etapa.
   */
  numero?: number | null;
  /**
   * Data de início.
   */
  dataInicio?: string;
  /**
   * Data de término.
   */
  dataTermino?: string;
  /**
   * Cor da etapa.
   */
  cor?: string | null;
  /**
   * Calendario.
   */
  calendario?: CalendarioLetivoFindOneInputDto | null;
};

export type TurmaDisponibilidadeFindOneResultDto = {
  /**
   * Data de início.
   */
  dataInicio: string;
  /**
   * Data de término.
   */
  dataFim: string | null;
  /**
   * Turma.
   */
  turma: TurmaFindOneResultDto | null;
  /**
   * ID do Registro.
   */
  id: string;
  /**
   * Data de Criação do Registro.
   */
  dateCreated: string;
  /**
   * Data de Atualização do Registro.
   */
  dateUpdated: string;
  /**
   * Data de Exclusão do Registro.
   */
  dateDeleted: string | null;
};

export type TurmaDisponibilidadeFindAllResultDto = {
  /**
   * Metadados da busca.
   */
  meta: PaginatedResultMetaDto;
  /**
   * Resultados da busca atual.
   */
  data: Array<TurmaDisponibilidadeFindOneResultDto>;
  /**
   * Links da busca.
   */
  links: PaginatedResultLinksDto;
};

export type TurmaDisponibilidadeInputCreateDto = {
  /**
   * Data de início.
   */
  dataInicio: string;
  /**
   * Data de término.
   */
  dataFim: string | null;
  /**
   * Turma.
   */
  turma: TurmaFindOneInputDto | null;
};

export type TurmaDisponibilidadeInputUpdateDto = {
  /**
   * Data de início.
   */
  dataInicio?: string;
  /**
   * Data de término.
   */
  dataFim?: string | null;
  /**
   * Turma.
   */
  turma?: TurmaFindOneInputDto | null;
};

export type AppControllerGetHelloResponse = {
  /**
   * O nome desta aplicação.
   */
  service: '@ladesa-ro/api';
  /**
   * Status desta aplicação.
   */
  status: 'up';
  /**
   * Prefixo do serviço API.
   */
  prefix?: string | null;
  /**
   * Versão do serviço API.
   */
  version: string;
};

export type ArquivoGetFileData = {
  acessoRecursoId: string;
  acessoRecursoNome: string;
  id: string;
  /**
   * Acesso via recurso: id
   */
  idRecurso: string;
  /**
   * Acesso via recurso: nome
   */
  nomeRecurso: string;
};

export type ArquivoGetFileResponse = Blob | File;

export type AuthWhoAmIResponse = AuthWhoAmIResultDto;

export type AuthLoginData = {
  requestBody: AuthLoginInputDto;
};

export type AuthLoginResponse = AuthSessionCredentialsDto;

export type AuthRefreshData = {
  requestBody: AuthRefreshInputDto;
};

export type AuthRefreshResponse = AuthSessionCredentialsDto;

export type AuthSetInitialPasswordData = {
  requestBody: AuthSetInitialPasswordInputDto;
};

export type AuthSetInitialPasswordResponse = boolean;

export type UsuarioListData = {
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type UsuarioListResponse = UsuarioFindAllResultDto;

export type UsuarioCreateData = {
  requestBody: UsuarioInputCreateDto;
};

export type UsuarioCreateResponse = UsuarioFindOneResultDto;

export type UsuarioFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type UsuarioFindByIdResponse = UsuarioFindOneResultDto;

export type UsuarioUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: UsuarioInputUpdateDto;
};

export type UsuarioUpdateByIdResponse = UsuarioFindOneResultDto;

export type UsuarioDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type UsuarioDeleteByIdResponse = boolean;

export type UsuarioGetCoverImageData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type UsuarioGetCoverImageResponse = Blob | File;

export type UsuarioSetCoverImageData = {
  formData: {
    file: Blob | File;
  };
  /**
   * ID do Registro.
   */
  id: string;
};

export type UsuarioSetCoverImageResponse = boolean;

export type UsuarioGetProfileImageData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type UsuarioGetProfileImageResponse = Blob | File;

export type UsuarioSetProfileImageData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type UsuarioSetProfileImageResponse = boolean;

export type VinculoListData = {
  /**
   * Filtros para 'ativo'.
   */
  filterAtivo?: Array<string>;
  /**
   * Filtros para 'campus.id'.
   */
  filterCampusId?: Array<string>;
  /**
   * Filtros para 'usuario.id'.
   */
  filterUsuarioId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type VinculoListResponse = VinculoFindAllResultDto;

export type VinculoUpdateData = {
  requestBody: VinculoUpdateInputDto;
};

export type VinculoUpdateResponse = VinculoFindAllResultDto;

export type CampusListData = {
  /**
   * Filtros para 'endereco.cidade.estado.id'.
   */
  filterEnderecoCidadeEstadoId?: Array<string>;
  /**
   * Filtros para 'endereco.cidade.id'.
   */
  filterEnderecoCidadeId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type CampusListResponse = CampusFindAllResultDto;

export type CampusCreateData = {
  requestBody: CampusInputCreateDto;
};

export type CampusCreateResponse = CampusFindOneResultDto;

export type CampusFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type CampusFindByIdResponse = CampusFindOneResultDto;

export type CampusUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: CampusInputUpdateDto;
};

export type CampusUpdateByIdResponse = CampusFindOneResultDto;

export type CampusDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type CampusDeleteByIdResponse = boolean;

export type ModalidadeListData = {
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type ModalidadeListResponse = ModalidadeFindAllResultDto;

export type ModalidadeCreateData = {
  requestBody: ModalidadeInputCreateDto;
};

export type ModalidadeCreateResponse = ModalidadeFindOneResultDto;

export type ModalidadeFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type ModalidadeFindByIdResponse = ModalidadeFindOneResultDto;

export type ModalidadeUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: ModalidadeInputUpdateDto;
};

export type ModalidadeUpdateByIdResponse = ModalidadeFindOneResultDto;

export type ModalidadeDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type ModalidadeDeleteByIdResponse = boolean;

export type EstadoListData = {
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type EstadoListResponse = EstadoFindAllResultDto;

export type EstadoFindByIdData = {
  /**
   * ID do Registro.
   */
  id: number;
};

export type EstadoFindByIdResponse = EstadoFindOneResultDto;

export type CidadeListData = {
  /**
   * Filtros para 'estado.id'.
   */
  filterEstadoId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type CidadeListResponse = CidadeFindAllResultDto;

export type CidadeFindByIdData = {
  /**
   * ID do Registro.
   */
  id: number;
};

export type CidadeFindByIdResponse = CidadeFindOneResultDto;

export type BlocoListData = {
  /**
   * Filtros para 'campus.id'.
   */
  filterCampusId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type BlocoListResponse = BlocoFindAllResultDto;

export type BlocoCreateData = {
  requestBody: BlocoInputCreateDto;
};

export type BlocoCreateResponse = BlocoFindOneResultDto;

export type BlocoFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type BlocoFindByIdResponse = BlocoFindOneResultDto;

export type BlocoUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: BlocoInputUpdateDto;
};

export type BlocoUpdateByIdResponse = BlocoFindOneResultDto;

export type BlocoDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type BlocoDeleteByIdResponse = boolean;

export type BlocoGetCoverImageData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type BlocoGetCoverImageResponse = Blob | File;

export type BlocoSetCoverImageData = {
  formData: {
    file: Blob | File;
  };
  /**
   * ID do Registro.
   */
  id: string;
};

export type BlocoSetCoverImageResponse = boolean;

export type AmbienteListData = {
  /**
   * Filtros para 'bloco.campus.id'.
   */
  filterBlocoCampusId?: Array<string>;
  /**
   * Filtros para 'bloco.id'.
   */
  filterBlocoId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type AmbienteListResponse = AmbienteFindAllResultDto;

export type AmbienteCreateData = {
  requestBody: AmbienteInputCreateDto;
};

export type AmbienteCreateResponse = AmbienteFindOneResultDto;

export type AmbienteFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type AmbienteFindByIdResponse = AmbienteFindOneResultDto;

export type AmbienteUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: AmbienteInputUpdateDto;
};

export type AmbienteUpdateByIdResponse = AmbienteFindOneResultDto;

export type AmbienteDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type AmbienteDeleteByIdResponse = boolean;

export type AmbienteGetCoverImageData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type AmbienteGetCoverImageResponse = Blob | File;

export type AmbienteSetCoverImageData = {
  formData: {
    file: Blob | File;
  };
  /**
   * ID do Registro.
   */
  id: string;
};

export type AmbienteSetCoverImageResponse = boolean;

export type ReservaListData = {
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type ReservaListResponse = ReservaFindAllResultDto;

export type ReservaCreateData = {
  requestBody: ReservaInputCreateDto;
};

export type ReservaCreateResponse = ReservaFindOneResultDto;

export type ReservaFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type ReservaFindByIdResponse = ReservaFindOneResultDto;

export type ReservaUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: ReservaInputUpdateDto;
};

export type ReservaUpdateByIdResponse = ReservaFindOneResultDto;

export type ReservaDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type ReservaDeleteByIdResponse = boolean;

export type CursoListData = {
  /**
   * Filtros para 'campus.id'.
   */
  filterCampusId?: Array<string>;
  /**
   * Filtros para 'modalidade.id'.
   */
  filterModalidadeId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type CursoListResponse = CursoFindAllResultDto;

export type CursoCreateData = {
  requestBody: CursoInputCreateDto;
};

export type CursoCreateResponse = CursoFindOneResultDto;

export type CursoFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type CursoFindByIdResponse = CursoFindOneResultDto;

export type CursoUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: CursoInputUpdateDto;
};

export type CursoUpdateByIdResponse = CursoFindOneResultDto;

export type CursoDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type CursoDeleteByIdResponse = boolean;

export type CursoGetCoverImageData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type CursoGetCoverImageResponse = Blob | File;

export type CursoSetCoverImageData = {
  formData: {
    file: Blob | File;
  };
  /**
   * ID do Registro.
   */
  id: string;
};

export type CursoSetCoverImageResponse = boolean;

export type DisciplinaListData = {
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type DisciplinaListResponse = DisciplinaFindAllResultDto;

export type DisciplinaCreateData = {
  requestBody: DisciplinaInputCreateDto;
};

export type DisciplinaCreateResponse = DisciplinaFindOneResultDto;

export type DisciplinaFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DisciplinaFindByIdResponse = DisciplinaFindOneResultDto;

export type DisciplinaUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: DisciplinaInputUpdateDto;
};

export type DisciplinaUpdateByIdResponse = DisciplinaFindOneResultDto;

export type DisciplinaDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DisciplinaDeleteByIdResponse = boolean;

export type DisciplinaGetCoverImageData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DisciplinaGetCoverImageResponse = Blob | File;

export type DisciplinaSetCoverImageData = {
  formData: {
    file: Blob | File;
  };
  /**
   * ID do Registro.
   */
  id: string;
};

export type DisciplinaSetCoverImageResponse = boolean;

export type TurmaListData = {
  /**
   * Filtros para 'ambientePadraoAula.capacidade'.
   */
  filterAmbientePadraoAulaCapacidade?: Array<string>;
  /**
   * Filtros para 'ambientePadraoAula.codigo'.
   */
  filterAmbientePadraoAulaCodigo?: Array<string>;
  /**
   * Filtros para 'ambientePadraoAula.nome'.
   */
  filterAmbientePadraoAulaNome?: Array<string>;
  /**
   * Filtros para 'ambientePadraoAula.tipo'.
   */
  filterAmbientePadraoAulaTipo?: Array<string>;
  /**
   * Filtros para 'curso.campus.id'.
   */
  filterCursoCampusId?: Array<string>;
  /**
   * Filtros para 'curso.modalidade.id'.
   */
  filterCursoModalidadeId?: Array<string>;
  /**
   * Filtros para 'curso.nome'.
   */
  filterCursoNome?: Array<string>;
  /**
   * Filtros para 'curso.nomeAbreviado'.
   */
  filterCursoNomeAbreviado?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type TurmaListResponse = TurmaFindAllResultDto;

export type TurmaCreateData = {
  requestBody: TurmaInputCreateDto;
};

export type TurmaCreateResponse = TurmaFindOneResultDto;

export type TurmaFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type TurmaFindByIdResponse = TurmaFindOneResultDto;

export type TurmaUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: TurmaInputUpdateDto;
};

export type TurmaUpdateByIdResponse = TurmaFindOneResultDto;

export type TurmaDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type TurmaDeleteByIdResponse = boolean;

export type TurmaGetCoverImageData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type TurmaGetCoverImageResponse = Blob | File;

export type TurmaSetCoverImageData = {
  formData: {
    file: Blob | File;
  };
  /**
   * ID do Registro.
   */
  id: string;
};

export type TurmaSetCoverImageResponse = boolean;

export type CalendarioLetivoListData = {
  /**
   * Filtros para 'campus.id'.
   */
  filterCampusId?: Array<string>;
  /**
   * Filtros para 'modalidade.id'.
   */
  filterModalidadeId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type CalendarioLetivoListResponse = CalendarioLetivoFindAllResultDto;

export type CalendarioLetivoCreateData = {
  requestBody: CalendarioLetivoInputCreateDto;
};

export type CalendarioLetivoCreateResponse = CalendarioLetivoFindOneResultDto;

export type CalendarioLetivoFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type CalendarioLetivoFindByIdResponse = CalendarioLetivoFindOneResultDto;

export type CalendarioLetivoUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: CalendarioLetivoInputUpdateDto;
};

export type CalendarioLetivoUpdateByIdResponse = CalendarioLetivoFindOneResultDto;

export type CalendarioLetivoDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type CalendarioLetivoDeleteByIdResponse = boolean;

export type EventoListData = {
  /**
   * Filtros para 'calendario.id'.
   */
  filterCalendarioId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type EventoListResponse = EventoFindAllResultDto;

export type EventoCreateData = {
  requestBody: EventoInputCreateDto;
};

export type EventoCreateResponse = EventoFindOneResultDto;

export type EventoFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type EventoFindByIdResponse = EventoFindOneResultDto;

export type EventoUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: EventoInputUpdateDto;
};

export type EventoUpdateByIdResponse = EventoFindOneResultDto;

export type EventoDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type EventoDeleteByIdResponse = boolean;

export type DiaCalendarioListData = {
  /**
   * Filtros para 'calendario.id'.
   */
  filterCalendarioId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type DiaCalendarioListResponse = DiaCalendarioFindAllResultDto;

export type DiaCalendarioCreateData = {
  requestBody: DiaCalendarioInputCreateDto;
};

export type DiaCalendarioCreateResponse = DiaCalendarioFindOneResultDto;

export type DiaCalendarioFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DiaCalendarioFindByIdResponse = DiaCalendarioFindOneResultDto;

export type DiaCalendarioUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: DiaCalendarioInputUpdateDto;
};

export type DiaCalendarioUpdateByIdResponse = DiaCalendarioFindOneResultDto;

export type DiaCalendarioDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DiaCalendarioDeleteByIdResponse = boolean;

export type DiarioListData = {
  /**
   * Filtros para 'ambientePadrao.id'.
   */
  filterAmbientePadraoId?: Array<string>;
  /**
   * Filtros para 'calendarioLetivo.id'.
   */
  filterCalendarioLetivoId?: Array<string>;
  /**
   * Filtros para 'disciplina.id'.
   */
  filterDisciplinaId?: Array<string>;
  /**
   * Filtros para 'turma.id'.
   */
  filterTurmaId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type DiarioListResponse = DiarioFindAllResultDto;

export type DiarioCreateData = {
  requestBody: DiarioInputCreateDto;
};

export type DiarioCreateResponse = DiarioFindOneResultDto;

export type DiarioFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DiarioFindByIdResponse = DiarioFindOneResultDto;

export type DiarioUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: DiarioInputUpdateDto;
};

export type DiarioUpdateByIdResponse = DiarioFindOneResultDto;

export type DiarioDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DiarioDeleteByIdResponse = boolean;

export type DiarioProfessorListData = {
  /**
   * Filtros para 'diario.id'.
   */
  filterDiarioId?: Array<string>;
  /**
   * Filtros para 'vinculo.id'.
   */
  filterVinculoId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type DiarioProfessorListResponse = DiarioProfessorFindAllResultDto;

export type DiarioProfessorCreateData = {
  requestBody: DiarioProfessorInputCreateDto;
};

export type DiarioProfessorCreateResponse = DiarioProfessorFindOneResultDto;

export type DiarioProfessorFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DiarioProfessorFindByIdResponse = DiarioProfessorFindOneResultDto;

export type DiarioProfessorUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: DiarioProfessorInputUpdateDto;
};

export type DiarioProfessorUpdateByIdResponse = DiarioProfessorFindOneResultDto;

export type DiarioProfessorDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type DiarioProfessorDeleteByIdResponse = boolean;

export type EtapaListData = {
  /**
   * Filtros para 'calendario.id'.
   */
  filterCalendarioId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type EtapaListResponse = EtapaFindAllResultDto;

export type EtapaCreateData = {
  requestBody: EtapaInputCreateDto;
};

export type EtapaCreateResponse = EtapaFindOneResultDto;

export type EtapaFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type EtapaFindByIdResponse = EtapaFindOneResultDto;

export type EtapaUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: EtapaInputUpdateDto;
};

export type EtapaUpdateByIdResponse = EtapaFindOneResultDto;

export type EtapaDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type EtapaDeleteByIdResponse = boolean;

export type TurmaDisponibilidadeListData = {
  /**
   * Filtros para 'turma.id'.
   */
  filterTurmaId?: Array<string>;
  /**
   * Limite de resultados por página.
   */
  limit?: number;
  /**
   * Página da listagem.
   */
  page?: number;
  /**
   * Busca textual.
   */
  search?: string;
  /**
   * Configurações de ordenamento.
   */
  sortBy?: Array<string>;
};

export type TurmaDisponibilidadeListResponse = TurmaDisponibilidadeFindAllResultDto;

export type TurmaDisponibilidadeCreateData = {
  requestBody: TurmaDisponibilidadeInputCreateDto;
};

export type TurmaDisponibilidadeCreateResponse = TurmaDisponibilidadeFindOneResultDto;

export type TurmaDisponibilidadeFindByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type TurmaDisponibilidadeFindByIdResponse = TurmaDisponibilidadeFindOneResultDto;

export type TurmaDisponibilidadeUpdateByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
  requestBody: TurmaDisponibilidadeInputUpdateDto;
};

export type TurmaDisponibilidadeUpdateByIdResponse = TurmaDisponibilidadeFindOneResultDto;

export type TurmaDisponibilidadeDeleteByIdData = {
  /**
   * ID do Registro.
   */
  id: string;
};

export type TurmaDisponibilidadeDeleteByIdResponse = boolean;

export type $OpenApiTs = {
  '/': {
    get: {
      res: {
        /**
         * Olá, Mundo!
         */
        200: {
          /**
           * O nome desta aplicação.
           */
          service: '@ladesa-ro/api';
          /**
           * Status desta aplicação.
           */
          status: 'up';
          /**
           * Prefixo do serviço API.
           */
          prefix?: string | null;
          /**
           * Versão do serviço API.
           */
          version: string;
        };
      };
    };
  };
  '/arquivos/{id}': {
    get: {
      req: ArquivoGetFileData;
      res: {
        /**
         * Binário.
         */
        200: Blob | File;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/autenticacao/quem-sou-eu': {
    get: {
      res: {
        /**
         * Resposta da operação "AuthWhoAmI".
         */
        200: AuthWhoAmIResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/autenticacao/login': {
    post: {
      req: AuthLoginData;
      res: {
        /**
         * Resposta da operação "AuthLogin".
         */
        200: AuthSessionCredentialsDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/autenticacao/login/refresh': {
    post: {
      req: AuthRefreshData;
      res: {
        /**
         * Resposta da operação "AuthRefresh".
         */
        200: AuthSessionCredentialsDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/autenticacao/definir-senha': {
    post: {
      req: AuthSetInitialPasswordData;
      res: {
        /**
         * Resposta da operação "AuthSetInitialPassword".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/usuarios': {
    get: {
      req: UsuarioListData;
      res: {
        /**
         * Resposta da operação "UsuarioList".
         */
        200: UsuarioFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: UsuarioCreateData;
      res: {
        /**
         * Resposta da operação "UsuarioCreate".
         */
        200: UsuarioFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/usuarios/{id}': {
    get: {
      req: UsuarioFindByIdData;
      res: {
        /**
         * Resposta da operação "UsuarioFindById".
         */
        200: UsuarioFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: UsuarioUpdateByIdData;
      res: {
        /**
         * Resposta da operação "UsuarioUpdateById".
         */
        200: UsuarioFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: UsuarioDeleteByIdData;
      res: {
        /**
         * Resposta da operação "UsuarioDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/usuarios/{id}/imagem/capa': {
    get: {
      req: UsuarioGetCoverImageData;
      res: {
        /**
         * Binário.
         */
        200: Blob | File;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    put: {
      req: UsuarioSetCoverImageData;
      res: {
        /**
         * Resposta da operação "UsuarioSetCoverImage".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/usuarios/{id}/imagem/perfil': {
    get: {
      req: UsuarioGetProfileImageData;
      res: {
        /**
         * Binário.
         */
        200: Blob | File;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    put: {
      req: UsuarioSetProfileImageData;
      res: {
        /**
         * Resposta da operação "UsuarioSetProfileImage".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/vinculos': {
    get: {
      req: VinculoListData;
      res: {
        /**
         * Resposta da operação "VinculoList".
         */
        200: VinculoFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: VinculoUpdateData;
      res: {
        /**
         * Resposta da operação "VinculoUpdate".
         */
        200: VinculoFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/campi': {
    get: {
      req: CampusListData;
      res: {
        /**
         * Resposta da operação "CampusList".
         */
        200: CampusFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: CampusCreateData;
      res: {
        /**
         * Resposta da operação "CampusCreate".
         */
        200: CampusFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/campi/{id}': {
    get: {
      req: CampusFindByIdData;
      res: {
        /**
         * Resposta da operação "CampusFindById".
         */
        200: CampusFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: CampusUpdateByIdData;
      res: {
        /**
         * Resposta da operação "CampusUpdateById".
         */
        200: CampusFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: CampusDeleteByIdData;
      res: {
        /**
         * Resposta da operação "CampusDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/modalidades': {
    get: {
      req: ModalidadeListData;
      res: {
        /**
         * Resposta da operação "ModalidadeList".
         */
        200: ModalidadeFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: ModalidadeCreateData;
      res: {
        /**
         * Resposta da operação "ModalidadeCreate".
         */
        200: ModalidadeFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/modalidades/{id}': {
    get: {
      req: ModalidadeFindByIdData;
      res: {
        /**
         * Resposta da operação "ModalidadeFindById".
         */
        200: ModalidadeFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: ModalidadeUpdateByIdData;
      res: {
        /**
         * Resposta da operação "ModalidadeUpdateById".
         */
        200: ModalidadeFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: ModalidadeDeleteByIdData;
      res: {
        /**
         * Resposta da operação "ModalidadeDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/base/estados': {
    get: {
      req: EstadoListData;
      res: {
        /**
         * Resposta da operação "EstadoList".
         */
        200: EstadoFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/base/estados/{id}': {
    get: {
      req: EstadoFindByIdData;
      res: {
        /**
         * Resposta da operação "EstadoFindById".
         */
        200: EstadoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/base/cidades': {
    get: {
      req: CidadeListData;
      res: {
        /**
         * Resposta da operação "CidadeList".
         */
        200: CidadeFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/base/cidades/{id}': {
    get: {
      req: CidadeFindByIdData;
      res: {
        /**
         * Resposta da operação "CidadeFindById".
         */
        200: CidadeFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/blocos': {
    get: {
      req: BlocoListData;
      res: {
        /**
         * Resposta da operação "BlocoList".
         */
        200: BlocoFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: BlocoCreateData;
      res: {
        /**
         * Resposta da operação "BlocoCreate".
         */
        200: BlocoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/blocos/{id}': {
    get: {
      req: BlocoFindByIdData;
      res: {
        /**
         * Resposta da operação "BlocoFindById".
         */
        200: BlocoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: BlocoUpdateByIdData;
      res: {
        /**
         * Resposta da operação "BlocoUpdateById".
         */
        200: BlocoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: BlocoDeleteByIdData;
      res: {
        /**
         * Resposta da operação "BlocoDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/blocos/{id}/imagem/capa': {
    get: {
      req: BlocoGetCoverImageData;
      res: {
        /**
         * Binário.
         */
        200: Blob | File;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    put: {
      req: BlocoSetCoverImageData;
      res: {
        /**
         * Resposta da operação "BlocoSetCoverImage".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/ambientes': {
    get: {
      req: AmbienteListData;
      res: {
        /**
         * Resposta da operação "AmbienteList".
         */
        200: AmbienteFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: AmbienteCreateData;
      res: {
        /**
         * Resposta da operação "AmbienteCreate".
         */
        200: AmbienteFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/ambientes/{id}': {
    get: {
      req: AmbienteFindByIdData;
      res: {
        /**
         * Resposta da operação "AmbienteFindById".
         */
        200: AmbienteFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: AmbienteUpdateByIdData;
      res: {
        /**
         * Resposta da operação "AmbienteUpdateById".
         */
        200: AmbienteFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: AmbienteDeleteByIdData;
      res: {
        /**
         * Resposta da operação "AmbienteDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/ambientes/{id}/imagem/capa': {
    get: {
      req: AmbienteGetCoverImageData;
      res: {
        /**
         * Binário.
         */
        200: Blob | File;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    put: {
      req: AmbienteSetCoverImageData;
      res: {
        /**
         * Resposta da operação "AmbienteSetCoverImage".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/reservas': {
    get: {
      req: ReservaListData;
      res: {
        /**
         * Resposta da operação "ReservaList".
         */
        200: ReservaFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: ReservaCreateData;
      res: {
        /**
         * Resposta da operação "ReservaCreate".
         */
        200: ReservaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/reservas/{id}': {
    get: {
      req: ReservaFindByIdData;
      res: {
        /**
         * Resposta da operação "ReservaFindById".
         */
        200: ReservaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: ReservaUpdateByIdData;
      res: {
        /**
         * Resposta da operação "ReservaUpdateById".
         */
        200: ReservaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: ReservaDeleteByIdData;
      res: {
        /**
         * Resposta da operação "ReservaDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/cursos': {
    get: {
      req: CursoListData;
      res: {
        /**
         * Resposta da operação "CursoList".
         */
        200: CursoFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: CursoCreateData;
      res: {
        /**
         * Resposta da operação "CursoCreate".
         */
        200: CursoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/cursos/{id}': {
    get: {
      req: CursoFindByIdData;
      res: {
        /**
         * Resposta da operação "CursoFindById".
         */
        200: CursoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: CursoUpdateByIdData;
      res: {
        /**
         * Resposta da operação "CursoUpdateById".
         */
        200: CursoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: CursoDeleteByIdData;
      res: {
        /**
         * Resposta da operação "CursoDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/cursos/{id}/imagem/capa': {
    get: {
      req: CursoGetCoverImageData;
      res: {
        /**
         * Binário.
         */
        200: Blob | File;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    put: {
      req: CursoSetCoverImageData;
      res: {
        /**
         * Resposta da operação "CursoSetCoverImage".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/disciplinas': {
    get: {
      req: DisciplinaListData;
      res: {
        /**
         * Resposta da operação "DisciplinaList".
         */
        200: DisciplinaFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: DisciplinaCreateData;
      res: {
        /**
         * Resposta da operação "DisciplinaCreate".
         */
        200: DisciplinaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/disciplinas/{id}': {
    get: {
      req: DisciplinaFindByIdData;
      res: {
        /**
         * Resposta da operação "DisciplinaFindById".
         */
        200: DisciplinaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: DisciplinaUpdateByIdData;
      res: {
        /**
         * Resposta da operação "DisciplinaUpdateById".
         */
        200: DisciplinaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: DisciplinaDeleteByIdData;
      res: {
        /**
         * Resposta da operação "DisciplinaDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/disciplinas/{id}/imagem/capa': {
    get: {
      req: DisciplinaGetCoverImageData;
      res: {
        /**
         * Binário.
         */
        200: Blob | File;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    put: {
      req: DisciplinaSetCoverImageData;
      res: {
        /**
         * Resposta da operação "DisciplinaSetCoverImage".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/turmas': {
    get: {
      req: TurmaListData;
      res: {
        /**
         * Resposta da operação "TurmaList".
         */
        200: TurmaFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: TurmaCreateData;
      res: {
        /**
         * Resposta da operação "TurmaCreate".
         */
        200: TurmaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/turmas/{id}': {
    get: {
      req: TurmaFindByIdData;
      res: {
        /**
         * Resposta da operação "TurmaFindById".
         */
        200: TurmaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: TurmaUpdateByIdData;
      res: {
        /**
         * Resposta da operação "TurmaUpdateById".
         */
        200: TurmaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: TurmaDeleteByIdData;
      res: {
        /**
         * Resposta da operação "TurmaDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/turmas/{id}/imagem/capa': {
    get: {
      req: TurmaGetCoverImageData;
      res: {
        /**
         * Binário.
         */
        200: Blob | File;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    put: {
      req: TurmaSetCoverImageData;
      res: {
        /**
         * Resposta da operação "TurmaSetCoverImage".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/calendarios-letivos': {
    get: {
      req: CalendarioLetivoListData;
      res: {
        /**
         * Resposta da operação "CalendarioLetivoList".
         */
        200: CalendarioLetivoFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: CalendarioLetivoCreateData;
      res: {
        /**
         * Resposta da operação "CalendarioLetivoCreate".
         */
        200: CalendarioLetivoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/calendarios-letivos/{id}': {
    get: {
      req: CalendarioLetivoFindByIdData;
      res: {
        /**
         * Resposta da operação "CalendarioLetivoFindById".
         */
        200: CalendarioLetivoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: CalendarioLetivoUpdateByIdData;
      res: {
        /**
         * Resposta da operação "CalendarioLetivoUpdateById".
         */
        200: CalendarioLetivoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: CalendarioLetivoDeleteByIdData;
      res: {
        /**
         * Resposta da operação "CalendarioLetivoDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/eventos': {
    get: {
      req: EventoListData;
      res: {
        /**
         * Resposta da operação "EventoList".
         */
        200: EventoFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: EventoCreateData;
      res: {
        /**
         * Resposta da operação "EventoCreate".
         */
        200: EventoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/eventos/{id}': {
    get: {
      req: EventoFindByIdData;
      res: {
        /**
         * Resposta da operação "EventoFindById".
         */
        200: EventoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: EventoUpdateByIdData;
      res: {
        /**
         * Resposta da operação "EventoUpdateById".
         */
        200: EventoFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: EventoDeleteByIdData;
      res: {
        /**
         * Resposta da operação "EventoDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/dias-calendario': {
    get: {
      req: DiaCalendarioListData;
      res: {
        /**
         * Resposta da operação "DiaCalendarioList".
         */
        200: DiaCalendarioFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: DiaCalendarioCreateData;
      res: {
        /**
         * Resposta da operação "DiaCalendarioCreate".
         */
        200: DiaCalendarioFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/dias-calendario/{id}': {
    get: {
      req: DiaCalendarioFindByIdData;
      res: {
        /**
         * Resposta da operação "DiaCalendarioFindById".
         */
        200: DiaCalendarioFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: DiaCalendarioUpdateByIdData;
      res: {
        /**
         * Resposta da operação "DiaCalendarioUpdateById".
         */
        200: DiaCalendarioFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: DiaCalendarioDeleteByIdData;
      res: {
        /**
         * Resposta da operação "DiaCalendarioDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/diarios': {
    get: {
      req: DiarioListData;
      res: {
        /**
         * Resposta da operação "DiarioList".
         */
        200: DiarioFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: DiarioCreateData;
      res: {
        /**
         * Resposta da operação "DiarioCreate".
         */
        200: DiarioFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/diarios/{id}': {
    get: {
      req: DiarioFindByIdData;
      res: {
        /**
         * Resposta da operação "DiarioFindById".
         */
        200: DiarioFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: DiarioUpdateByIdData;
      res: {
        /**
         * Resposta da operação "DiarioUpdateById".
         */
        200: DiarioFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: DiarioDeleteByIdData;
      res: {
        /**
         * Resposta da operação "DiarioDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/diario-professor': {
    get: {
      req: DiarioProfessorListData;
      res: {
        /**
         * Resposta da operação "DiarioProfessorList".
         */
        200: DiarioProfessorFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: DiarioProfessorCreateData;
      res: {
        /**
         * Resposta da operação "DiarioProfessorCreate".
         */
        200: DiarioProfessorFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/diario-professor/{id}': {
    get: {
      req: DiarioProfessorFindByIdData;
      res: {
        /**
         * Resposta da operação "DiarioProfessorFindById".
         */
        200: DiarioProfessorFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: DiarioProfessorUpdateByIdData;
      res: {
        /**
         * Resposta da operação "DiarioProfessorUpdateById".
         */
        200: DiarioProfessorFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: DiarioProfessorDeleteByIdData;
      res: {
        /**
         * Resposta da operação "DiarioProfessorDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/etapas': {
    get: {
      req: EtapaListData;
      res: {
        /**
         * Resposta da operação "EtapaList".
         */
        200: EtapaFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: EtapaCreateData;
      res: {
        /**
         * Resposta da operação "EtapaCreate".
         */
        200: EtapaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/etapas/{id}': {
    get: {
      req: EtapaFindByIdData;
      res: {
        /**
         * Resposta da operação "EtapaFindById".
         */
        200: EtapaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: EtapaUpdateByIdData;
      res: {
        /**
         * Resposta da operação "EtapaUpdateById".
         */
        200: EtapaFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: EtapaDeleteByIdData;
      res: {
        /**
         * Resposta da operação "EtapaDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/turmas-disponibilidade': {
    get: {
      req: TurmaDisponibilidadeListData;
      res: {
        /**
         * Resposta da operação "TurmaDisponibilidadeList".
         */
        200: TurmaDisponibilidadeFindAllResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    post: {
      req: TurmaDisponibilidadeCreateData;
      res: {
        /**
         * Resposta da operação "TurmaDisponibilidadeCreate".
         */
        200: TurmaDisponibilidadeFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
  '/turmas-disponibilidade/{id}': {
    get: {
      req: TurmaDisponibilidadeFindByIdData;
      res: {
        /**
         * Resposta da operação "TurmaDisponibilidadeFindById".
         */
        200: TurmaDisponibilidadeFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    patch: {
      req: TurmaDisponibilidadeUpdateByIdData;
      res: {
        /**
         * Resposta da operação "TurmaDisponibilidadeUpdateById".
         */
        200: TurmaDisponibilidadeFindOneResultDto;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
    delete: {
      req: TurmaDisponibilidadeDeleteByIdData;
      res: {
        /**
         * Resposta da operação "TurmaDisponibilidadeDeleteById".
         */
        200: boolean;
        /**
         * O solicitante não tem permissão para executar esta ação.
         */
        403: unknown;
        /**
         * Registro não encontrado.
         */
        404: unknown;
      };
    };
  };
};
